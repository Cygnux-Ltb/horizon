/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.horizon.trader.report;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
/** * 订单回报 */
@org.apache.avro.specific.AvroGenerated
public class OrderReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4838972158899690179L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderReport\",\"namespace\":\"io.horizon.trader.report\",\"doc\":\"* 订单回报\",\"fields\":[{\"name\":\"epochMicros\",\"type\":\"long\"},{\"name\":\"ordSysId\",\"type\":\"long\"},{\"name\":\"tradingDay\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"investorId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"orderRef\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"brokerSysId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"exchangeCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instrumentCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":\"int\"},{\"name\":\"direction\",\"type\":\"int\"},{\"name\":\"action\",\"type\":\"int\"},{\"name\":\"offerQty\",\"type\":\"int\",\"default\":0},{\"name\":\"filledQty\",\"type\":\"int\",\"default\":0},{\"name\":\"offerPrice\",\"type\":\"long\",\"default\":0},{\"name\":\"tradePrice\",\"type\":\"long\",\"default\":0},{\"name\":\"offerTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"updateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderReport> ENCODER =
      new BinaryMessageEncoder<OrderReport>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderReport> DECODER =
      new BinaryMessageDecoder<OrderReport>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<OrderReport> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<OrderReport> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<OrderReport> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderReport>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this OrderReport to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a OrderReport from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a OrderReport instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static OrderReport fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long epochMicros;
  private long ordSysId;
  private java.lang.String tradingDay;
  private java.lang.String investorId;
  private java.lang.String orderRef;
  private java.lang.String brokerSysId;
  private java.lang.String exchangeCode;
  private java.lang.String instrumentCode;
  private int status;
  private int direction;
  private int action;
  private int offerQty;
  private int filledQty;
  private long offerPrice;
  private long tradePrice;
  private java.lang.String offerTime;
  private java.lang.String updateTime;
  private java.lang.String message;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderReport() {}

  /**
   * All-args constructor.
   * @param epochMicros The new value for epochMicros
   * @param ordSysId The new value for ordSysId
   * @param tradingDay The new value for tradingDay
   * @param investorId The new value for investorId
   * @param orderRef The new value for orderRef
   * @param brokerSysId The new value for brokerSysId
   * @param exchangeCode The new value for exchangeCode
   * @param instrumentCode The new value for instrumentCode
   * @param status The new value for status
   * @param direction The new value for direction
   * @param action The new value for action
   * @param offerQty The new value for offerQty
   * @param filledQty The new value for filledQty
   * @param offerPrice The new value for offerPrice
   * @param tradePrice The new value for tradePrice
   * @param offerTime The new value for offerTime
   * @param updateTime The new value for updateTime
   * @param message The new value for message
   */
  public OrderReport(java.lang.Long epochMicros, java.lang.Long ordSysId, java.lang.String tradingDay, java.lang.String investorId, java.lang.String orderRef, java.lang.String brokerSysId, java.lang.String exchangeCode, java.lang.String instrumentCode, java.lang.Integer status, java.lang.Integer direction, java.lang.Integer action, java.lang.Integer offerQty, java.lang.Integer filledQty, java.lang.Long offerPrice, java.lang.Long tradePrice, java.lang.String offerTime, java.lang.String updateTime, java.lang.String message) {
    this.epochMicros = epochMicros;
    this.ordSysId = ordSysId;
    this.tradingDay = tradingDay;
    this.investorId = investorId;
    this.orderRef = orderRef;
    this.brokerSysId = brokerSysId;
    this.exchangeCode = exchangeCode;
    this.instrumentCode = instrumentCode;
    this.status = status;
    this.direction = direction;
    this.action = action;
    this.offerQty = offerQty;
    this.filledQty = filledQty;
    this.offerPrice = offerPrice;
    this.tradePrice = tradePrice;
    this.offerTime = offerTime;
    this.updateTime = updateTime;
    this.message = message;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return epochMicros;
    case 1: return ordSysId;
    case 2: return tradingDay;
    case 3: return investorId;
    case 4: return orderRef;
    case 5: return brokerSysId;
    case 6: return exchangeCode;
    case 7: return instrumentCode;
    case 8: return status;
    case 9: return direction;
    case 10: return action;
    case 11: return offerQty;
    case 12: return filledQty;
    case 13: return offerPrice;
    case 14: return tradePrice;
    case 15: return offerTime;
    case 16: return updateTime;
    case 17: return message;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: epochMicros = (java.lang.Long)value$; break;
    case 1: ordSysId = (java.lang.Long)value$; break;
    case 2: tradingDay = value$ != null ? value$.toString() : null; break;
    case 3: investorId = value$ != null ? value$.toString() : null; break;
    case 4: orderRef = value$ != null ? value$.toString() : null; break;
    case 5: brokerSysId = value$ != null ? value$.toString() : null; break;
    case 6: exchangeCode = value$ != null ? value$.toString() : null; break;
    case 7: instrumentCode = value$ != null ? value$.toString() : null; break;
    case 8: status = (java.lang.Integer)value$; break;
    case 9: direction = (java.lang.Integer)value$; break;
    case 10: action = (java.lang.Integer)value$; break;
    case 11: offerQty = (java.lang.Integer)value$; break;
    case 12: filledQty = (java.lang.Integer)value$; break;
    case 13: offerPrice = (java.lang.Long)value$; break;
    case 14: tradePrice = (java.lang.Long)value$; break;
    case 15: offerTime = value$ != null ? value$.toString() : null; break;
    case 16: updateTime = value$ != null ? value$.toString() : null; break;
    case 17: message = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'epochMicros' field.
   * @return The value of the 'epochMicros' field.
   */
  public long getEpochMicros() {
    return epochMicros;
  }

  /**
   * Gets the value of the 'epochMicros' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalEpochMicros() {
    return Optional.<java.lang.Long>ofNullable(epochMicros);
  }

  /**
   * Sets the value of the 'epochMicros' field.
   * @param value the value to set.
   */
  public void setEpochMicros(long value) {
    this.epochMicros = value;
  }

  /**
   * Gets the value of the 'ordSysId' field.
   * @return The value of the 'ordSysId' field.
   */
  public long getOrdSysId() {
    return ordSysId;
  }

  /**
   * Gets the value of the 'ordSysId' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalOrdSysId() {
    return Optional.<java.lang.Long>ofNullable(ordSysId);
  }

  /**
   * Sets the value of the 'ordSysId' field.
   * @param value the value to set.
   */
  public void setOrdSysId(long value) {
    this.ordSysId = value;
  }

  /**
   * Gets the value of the 'tradingDay' field.
   * @return The value of the 'tradingDay' field.
   */
  public java.lang.String getTradingDay() {
    return tradingDay;
  }

  /**
   * Gets the value of the 'tradingDay' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalTradingDay() {
    return Optional.<java.lang.String>ofNullable(tradingDay);
  }

  /**
   * Sets the value of the 'tradingDay' field.
   * @param value the value to set.
   */
  public void setTradingDay(java.lang.String value) {
    this.tradingDay = value;
  }

  /**
   * Gets the value of the 'investorId' field.
   * @return The value of the 'investorId' field.
   */
  public java.lang.String getInvestorId() {
    return investorId;
  }

  /**
   * Gets the value of the 'investorId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalInvestorId() {
    return Optional.<java.lang.String>ofNullable(investorId);
  }

  /**
   * Sets the value of the 'investorId' field.
   * @param value the value to set.
   */
  public void setInvestorId(java.lang.String value) {
    this.investorId = value;
  }

  /**
   * Gets the value of the 'orderRef' field.
   * @return The value of the 'orderRef' field.
   */
  public java.lang.String getOrderRef() {
    return orderRef;
  }

  /**
   * Gets the value of the 'orderRef' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalOrderRef() {
    return Optional.<java.lang.String>ofNullable(orderRef);
  }

  /**
   * Sets the value of the 'orderRef' field.
   * @param value the value to set.
   */
  public void setOrderRef(java.lang.String value) {
    this.orderRef = value;
  }

  /**
   * Gets the value of the 'brokerSysId' field.
   * @return The value of the 'brokerSysId' field.
   */
  public java.lang.String getBrokerSysId() {
    return brokerSysId;
  }

  /**
   * Gets the value of the 'brokerSysId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalBrokerSysId() {
    return Optional.<java.lang.String>ofNullable(brokerSysId);
  }

  /**
   * Sets the value of the 'brokerSysId' field.
   * @param value the value to set.
   */
  public void setBrokerSysId(java.lang.String value) {
    this.brokerSysId = value;
  }

  /**
   * Gets the value of the 'exchangeCode' field.
   * @return The value of the 'exchangeCode' field.
   */
  public java.lang.String getExchangeCode() {
    return exchangeCode;
  }

  /**
   * Gets the value of the 'exchangeCode' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalExchangeCode() {
    return Optional.<java.lang.String>ofNullable(exchangeCode);
  }

  /**
   * Sets the value of the 'exchangeCode' field.
   * @param value the value to set.
   */
  public void setExchangeCode(java.lang.String value) {
    this.exchangeCode = value;
  }

  /**
   * Gets the value of the 'instrumentCode' field.
   * @return The value of the 'instrumentCode' field.
   */
  public java.lang.String getInstrumentCode() {
    return instrumentCode;
  }

  /**
   * Gets the value of the 'instrumentCode' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalInstrumentCode() {
    return Optional.<java.lang.String>ofNullable(instrumentCode);
  }

  /**
   * Sets the value of the 'instrumentCode' field.
   * @param value the value to set.
   */
  public void setInstrumentCode(java.lang.String value) {
    this.instrumentCode = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public int getStatus() {
    return status;
  }

  /**
   * Gets the value of the 'status' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalStatus() {
    return Optional.<java.lang.Integer>ofNullable(status);
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(int value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return The value of the 'direction' field.
   */
  public int getDirection() {
    return direction;
  }

  /**
   * Gets the value of the 'direction' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalDirection() {
    return Optional.<java.lang.Integer>ofNullable(direction);
  }

  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public void setDirection(int value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'action' field.
   * @return The value of the 'action' field.
   */
  public int getAction() {
    return action;
  }

  /**
   * Gets the value of the 'action' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalAction() {
    return Optional.<java.lang.Integer>ofNullable(action);
  }

  /**
   * Sets the value of the 'action' field.
   * @param value the value to set.
   */
  public void setAction(int value) {
    this.action = value;
  }

  /**
   * Gets the value of the 'offerQty' field.
   * @return The value of the 'offerQty' field.
   */
  public int getOfferQty() {
    return offerQty;
  }

  /**
   * Gets the value of the 'offerQty' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalOfferQty() {
    return Optional.<java.lang.Integer>ofNullable(offerQty);
  }

  /**
   * Sets the value of the 'offerQty' field.
   * @param value the value to set.
   */
  public void setOfferQty(int value) {
    this.offerQty = value;
  }

  /**
   * Gets the value of the 'filledQty' field.
   * @return The value of the 'filledQty' field.
   */
  public int getFilledQty() {
    return filledQty;
  }

  /**
   * Gets the value of the 'filledQty' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalFilledQty() {
    return Optional.<java.lang.Integer>ofNullable(filledQty);
  }

  /**
   * Sets the value of the 'filledQty' field.
   * @param value the value to set.
   */
  public void setFilledQty(int value) {
    this.filledQty = value;
  }

  /**
   * Gets the value of the 'offerPrice' field.
   * @return The value of the 'offerPrice' field.
   */
  public long getOfferPrice() {
    return offerPrice;
  }

  /**
   * Gets the value of the 'offerPrice' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalOfferPrice() {
    return Optional.<java.lang.Long>ofNullable(offerPrice);
  }

  /**
   * Sets the value of the 'offerPrice' field.
   * @param value the value to set.
   */
  public void setOfferPrice(long value) {
    this.offerPrice = value;
  }

  /**
   * Gets the value of the 'tradePrice' field.
   * @return The value of the 'tradePrice' field.
   */
  public long getTradePrice() {
    return tradePrice;
  }

  /**
   * Gets the value of the 'tradePrice' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalTradePrice() {
    return Optional.<java.lang.Long>ofNullable(tradePrice);
  }

  /**
   * Sets the value of the 'tradePrice' field.
   * @param value the value to set.
   */
  public void setTradePrice(long value) {
    this.tradePrice = value;
  }

  /**
   * Gets the value of the 'offerTime' field.
   * @return The value of the 'offerTime' field.
   */
  public java.lang.String getOfferTime() {
    return offerTime;
  }

  /**
   * Gets the value of the 'offerTime' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalOfferTime() {
    return Optional.<java.lang.String>ofNullable(offerTime);
  }

  /**
   * Sets the value of the 'offerTime' field.
   * @param value the value to set.
   */
  public void setOfferTime(java.lang.String value) {
    this.offerTime = value;
  }

  /**
   * Gets the value of the 'updateTime' field.
   * @return The value of the 'updateTime' field.
   */
  public java.lang.String getUpdateTime() {
    return updateTime;
  }

  /**
   * Gets the value of the 'updateTime' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalUpdateTime() {
    return Optional.<java.lang.String>ofNullable(updateTime);
  }

  /**
   * Sets the value of the 'updateTime' field.
   * @param value the value to set.
   */
  public void setUpdateTime(java.lang.String value) {
    this.updateTime = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * Gets the value of the 'message' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalMessage() {
    return Optional.<java.lang.String>ofNullable(message);
  }

  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.message = value;
  }

  /**
   * Creates a new OrderReport RecordBuilder.
   * @return A new OrderReport RecordBuilder
   */
  public static io.horizon.trader.report.OrderReport.Builder newBuilder() {
    return new io.horizon.trader.report.OrderReport.Builder();
  }

  /**
   * Creates a new OrderReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderReport RecordBuilder
   */
  public static io.horizon.trader.report.OrderReport.Builder newBuilder(io.horizon.trader.report.OrderReport.Builder other) {
    if (other == null) {
      return new io.horizon.trader.report.OrderReport.Builder();
    } else {
      return new io.horizon.trader.report.OrderReport.Builder(other);
    }
  }

  /**
   * Creates a new OrderReport RecordBuilder by copying an existing OrderReport instance.
   * @param other The existing instance to copy.
   * @return A new OrderReport RecordBuilder
   */
  public static io.horizon.trader.report.OrderReport.Builder newBuilder(io.horizon.trader.report.OrderReport other) {
    if (other == null) {
      return new io.horizon.trader.report.OrderReport.Builder();
    } else {
      return new io.horizon.trader.report.OrderReport.Builder(other);
    }
  }

  /**
   * RecordBuilder for OrderReport instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderReport>
    implements org.apache.avro.data.RecordBuilder<OrderReport> {

    private long epochMicros;
    private long ordSysId;
    private java.lang.String tradingDay;
    private java.lang.String investorId;
    private java.lang.String orderRef;
    private java.lang.String brokerSysId;
    private java.lang.String exchangeCode;
    private java.lang.String instrumentCode;
    private int status;
    private int direction;
    private int action;
    private int offerQty;
    private int filledQty;
    private long offerPrice;
    private long tradePrice;
    private java.lang.String offerTime;
    private java.lang.String updateTime;
    private java.lang.String message;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.horizon.trader.report.OrderReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.epochMicros)) {
        this.epochMicros = data().deepCopy(fields()[0].schema(), other.epochMicros);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ordSysId)) {
        this.ordSysId = data().deepCopy(fields()[1].schema(), other.ordSysId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.tradingDay)) {
        this.tradingDay = data().deepCopy(fields()[2].schema(), other.tradingDay);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.investorId)) {
        this.investorId = data().deepCopy(fields()[3].schema(), other.investorId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.orderRef)) {
        this.orderRef = data().deepCopy(fields()[4].schema(), other.orderRef);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.brokerSysId)) {
        this.brokerSysId = data().deepCopy(fields()[5].schema(), other.brokerSysId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.exchangeCode)) {
        this.exchangeCode = data().deepCopy(fields()[6].schema(), other.exchangeCode);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[7].schema(), other.instrumentCode);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.status)) {
        this.status = data().deepCopy(fields()[8].schema(), other.status);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.direction)) {
        this.direction = data().deepCopy(fields()[9].schema(), other.direction);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.action)) {
        this.action = data().deepCopy(fields()[10].schema(), other.action);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.offerQty)) {
        this.offerQty = data().deepCopy(fields()[11].schema(), other.offerQty);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.filledQty)) {
        this.filledQty = data().deepCopy(fields()[12].schema(), other.filledQty);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.offerPrice)) {
        this.offerPrice = data().deepCopy(fields()[13].schema(), other.offerPrice);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.tradePrice)) {
        this.tradePrice = data().deepCopy(fields()[14].schema(), other.tradePrice);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.offerTime)) {
        this.offerTime = data().deepCopy(fields()[15].schema(), other.offerTime);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[16].schema(), other.updateTime);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.message)) {
        this.message = data().deepCopy(fields()[17].schema(), other.message);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
    }

    /**
     * Creates a Builder by copying an existing OrderReport instance
     * @param other The existing instance to copy.
     */
    private Builder(io.horizon.trader.report.OrderReport other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.epochMicros)) {
        this.epochMicros = data().deepCopy(fields()[0].schema(), other.epochMicros);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ordSysId)) {
        this.ordSysId = data().deepCopy(fields()[1].schema(), other.ordSysId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tradingDay)) {
        this.tradingDay = data().deepCopy(fields()[2].schema(), other.tradingDay);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.investorId)) {
        this.investorId = data().deepCopy(fields()[3].schema(), other.investorId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.orderRef)) {
        this.orderRef = data().deepCopy(fields()[4].schema(), other.orderRef);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.brokerSysId)) {
        this.brokerSysId = data().deepCopy(fields()[5].schema(), other.brokerSysId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.exchangeCode)) {
        this.exchangeCode = data().deepCopy(fields()[6].schema(), other.exchangeCode);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[7].schema(), other.instrumentCode);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.status)) {
        this.status = data().deepCopy(fields()[8].schema(), other.status);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.direction)) {
        this.direction = data().deepCopy(fields()[9].schema(), other.direction);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.action)) {
        this.action = data().deepCopy(fields()[10].schema(), other.action);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.offerQty)) {
        this.offerQty = data().deepCopy(fields()[11].schema(), other.offerQty);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.filledQty)) {
        this.filledQty = data().deepCopy(fields()[12].schema(), other.filledQty);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.offerPrice)) {
        this.offerPrice = data().deepCopy(fields()[13].schema(), other.offerPrice);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.tradePrice)) {
        this.tradePrice = data().deepCopy(fields()[14].schema(), other.tradePrice);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.offerTime)) {
        this.offerTime = data().deepCopy(fields()[15].schema(), other.offerTime);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[16].schema(), other.updateTime);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.message)) {
        this.message = data().deepCopy(fields()[17].schema(), other.message);
        fieldSetFlags()[17] = true;
      }
    }

    /**
      * Gets the value of the 'epochMicros' field.
      * @return The value.
      */
    public long getEpochMicros() {
      return epochMicros;
    }

    /**
      * Gets the value of the 'epochMicros' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalEpochMicros() {
      return Optional.<java.lang.Long>ofNullable(epochMicros);
    }

    /**
      * Sets the value of the 'epochMicros' field.
      * @param value The value of 'epochMicros'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setEpochMicros(long value) {
      validate(fields()[0], value);
      this.epochMicros = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'epochMicros' field has been set.
      * @return True if the 'epochMicros' field has been set, false otherwise.
      */
    public boolean hasEpochMicros() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'epochMicros' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearEpochMicros() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ordSysId' field.
      * @return The value.
      */
    public long getOrdSysId() {
      return ordSysId;
    }

    /**
      * Gets the value of the 'ordSysId' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalOrdSysId() {
      return Optional.<java.lang.Long>ofNullable(ordSysId);
    }

    /**
      * Sets the value of the 'ordSysId' field.
      * @param value The value of 'ordSysId'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setOrdSysId(long value) {
      validate(fields()[1], value);
      this.ordSysId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ordSysId' field has been set.
      * @return True if the 'ordSysId' field has been set, false otherwise.
      */
    public boolean hasOrdSysId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ordSysId' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearOrdSysId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradingDay' field.
      * @return The value.
      */
    public java.lang.String getTradingDay() {
      return tradingDay;
    }

    /**
      * Gets the value of the 'tradingDay' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalTradingDay() {
      return Optional.<java.lang.String>ofNullable(tradingDay);
    }

    /**
      * Sets the value of the 'tradingDay' field.
      * @param value The value of 'tradingDay'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setTradingDay(java.lang.String value) {
      validate(fields()[2], value);
      this.tradingDay = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tradingDay' field has been set.
      * @return True if the 'tradingDay' field has been set, false otherwise.
      */
    public boolean hasTradingDay() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tradingDay' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearTradingDay() {
      tradingDay = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'investorId' field.
      * @return The value.
      */
    public java.lang.String getInvestorId() {
      return investorId;
    }

    /**
      * Gets the value of the 'investorId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalInvestorId() {
      return Optional.<java.lang.String>ofNullable(investorId);
    }

    /**
      * Sets the value of the 'investorId' field.
      * @param value The value of 'investorId'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setInvestorId(java.lang.String value) {
      validate(fields()[3], value);
      this.investorId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'investorId' field has been set.
      * @return True if the 'investorId' field has been set, false otherwise.
      */
    public boolean hasInvestorId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'investorId' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearInvestorId() {
      investorId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderRef' field.
      * @return The value.
      */
    public java.lang.String getOrderRef() {
      return orderRef;
    }

    /**
      * Gets the value of the 'orderRef' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalOrderRef() {
      return Optional.<java.lang.String>ofNullable(orderRef);
    }

    /**
      * Sets the value of the 'orderRef' field.
      * @param value The value of 'orderRef'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setOrderRef(java.lang.String value) {
      validate(fields()[4], value);
      this.orderRef = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'orderRef' field has been set.
      * @return True if the 'orderRef' field has been set, false otherwise.
      */
    public boolean hasOrderRef() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'orderRef' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearOrderRef() {
      orderRef = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerSysId' field.
      * @return The value.
      */
    public java.lang.String getBrokerSysId() {
      return brokerSysId;
    }

    /**
      * Gets the value of the 'brokerSysId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalBrokerSysId() {
      return Optional.<java.lang.String>ofNullable(brokerSysId);
    }

    /**
      * Sets the value of the 'brokerSysId' field.
      * @param value The value of 'brokerSysId'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setBrokerSysId(java.lang.String value) {
      validate(fields()[5], value);
      this.brokerSysId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerSysId' field has been set.
      * @return True if the 'brokerSysId' field has been set, false otherwise.
      */
    public boolean hasBrokerSysId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'brokerSysId' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearBrokerSysId() {
      brokerSysId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'exchangeCode' field.
      * @return The value.
      */
    public java.lang.String getExchangeCode() {
      return exchangeCode;
    }

    /**
      * Gets the value of the 'exchangeCode' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalExchangeCode() {
      return Optional.<java.lang.String>ofNullable(exchangeCode);
    }

    /**
      * Sets the value of the 'exchangeCode' field.
      * @param value The value of 'exchangeCode'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setExchangeCode(java.lang.String value) {
      validate(fields()[6], value);
      this.exchangeCode = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'exchangeCode' field has been set.
      * @return True if the 'exchangeCode' field has been set, false otherwise.
      */
    public boolean hasExchangeCode() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'exchangeCode' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearExchangeCode() {
      exchangeCode = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentCode' field.
      * @return The value.
      */
    public java.lang.String getInstrumentCode() {
      return instrumentCode;
    }

    /**
      * Gets the value of the 'instrumentCode' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalInstrumentCode() {
      return Optional.<java.lang.String>ofNullable(instrumentCode);
    }

    /**
      * Sets the value of the 'instrumentCode' field.
      * @param value The value of 'instrumentCode'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setInstrumentCode(java.lang.String value) {
      validate(fields()[7], value);
      this.instrumentCode = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentCode' field has been set.
      * @return True if the 'instrumentCode' field has been set, false otherwise.
      */
    public boolean hasInstrumentCode() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'instrumentCode' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearInstrumentCode() {
      instrumentCode = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public int getStatus() {
      return status;
    }

    /**
      * Gets the value of the 'status' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalStatus() {
      return Optional.<java.lang.Integer>ofNullable(status);
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setStatus(int value) {
      validate(fields()[8], value);
      this.status = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearStatus() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * @return The value.
      */
    public int getDirection() {
      return direction;
    }

    /**
      * Gets the value of the 'direction' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalDirection() {
      return Optional.<java.lang.Integer>ofNullable(direction);
    }

    /**
      * Sets the value of the 'direction' field.
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setDirection(int value) {
      validate(fields()[9], value);
      this.direction = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'direction' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearDirection() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'action' field.
      * @return The value.
      */
    public int getAction() {
      return action;
    }

    /**
      * Gets the value of the 'action' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalAction() {
      return Optional.<java.lang.Integer>ofNullable(action);
    }

    /**
      * Sets the value of the 'action' field.
      * @param value The value of 'action'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setAction(int value) {
      validate(fields()[10], value);
      this.action = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'action' field has been set.
      * @return True if the 'action' field has been set, false otherwise.
      */
    public boolean hasAction() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'action' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearAction() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerQty' field.
      * @return The value.
      */
    public int getOfferQty() {
      return offerQty;
    }

    /**
      * Gets the value of the 'offerQty' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalOfferQty() {
      return Optional.<java.lang.Integer>ofNullable(offerQty);
    }

    /**
      * Sets the value of the 'offerQty' field.
      * @param value The value of 'offerQty'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setOfferQty(int value) {
      validate(fields()[11], value);
      this.offerQty = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'offerQty' field has been set.
      * @return True if the 'offerQty' field has been set, false otherwise.
      */
    public boolean hasOfferQty() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'offerQty' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearOfferQty() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'filledQty' field.
      * @return The value.
      */
    public int getFilledQty() {
      return filledQty;
    }

    /**
      * Gets the value of the 'filledQty' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalFilledQty() {
      return Optional.<java.lang.Integer>ofNullable(filledQty);
    }

    /**
      * Sets the value of the 'filledQty' field.
      * @param value The value of 'filledQty'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setFilledQty(int value) {
      validate(fields()[12], value);
      this.filledQty = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'filledQty' field has been set.
      * @return True if the 'filledQty' field has been set, false otherwise.
      */
    public boolean hasFilledQty() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'filledQty' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearFilledQty() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerPrice' field.
      * @return The value.
      */
    public long getOfferPrice() {
      return offerPrice;
    }

    /**
      * Gets the value of the 'offerPrice' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalOfferPrice() {
      return Optional.<java.lang.Long>ofNullable(offerPrice);
    }

    /**
      * Sets the value of the 'offerPrice' field.
      * @param value The value of 'offerPrice'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setOfferPrice(long value) {
      validate(fields()[13], value);
      this.offerPrice = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'offerPrice' field has been set.
      * @return True if the 'offerPrice' field has been set, false otherwise.
      */
    public boolean hasOfferPrice() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'offerPrice' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearOfferPrice() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradePrice' field.
      * @return The value.
      */
    public long getTradePrice() {
      return tradePrice;
    }

    /**
      * Gets the value of the 'tradePrice' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalTradePrice() {
      return Optional.<java.lang.Long>ofNullable(tradePrice);
    }

    /**
      * Sets the value of the 'tradePrice' field.
      * @param value The value of 'tradePrice'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setTradePrice(long value) {
      validate(fields()[14], value);
      this.tradePrice = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'tradePrice' field has been set.
      * @return True if the 'tradePrice' field has been set, false otherwise.
      */
    public boolean hasTradePrice() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'tradePrice' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearTradePrice() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerTime' field.
      * @return The value.
      */
    public java.lang.String getOfferTime() {
      return offerTime;
    }

    /**
      * Gets the value of the 'offerTime' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalOfferTime() {
      return Optional.<java.lang.String>ofNullable(offerTime);
    }

    /**
      * Sets the value of the 'offerTime' field.
      * @param value The value of 'offerTime'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setOfferTime(java.lang.String value) {
      validate(fields()[15], value);
      this.offerTime = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'offerTime' field has been set.
      * @return True if the 'offerTime' field has been set, false otherwise.
      */
    public boolean hasOfferTime() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'offerTime' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearOfferTime() {
      offerTime = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateTime' field.
      * @return The value.
      */
    public java.lang.String getUpdateTime() {
      return updateTime;
    }

    /**
      * Gets the value of the 'updateTime' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalUpdateTime() {
      return Optional.<java.lang.String>ofNullable(updateTime);
    }

    /**
      * Sets the value of the 'updateTime' field.
      * @param value The value of 'updateTime'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setUpdateTime(java.lang.String value) {
      validate(fields()[16], value);
      this.updateTime = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'updateTime' field has been set.
      * @return True if the 'updateTime' field has been set, false otherwise.
      */
    public boolean hasUpdateTime() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'updateTime' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearUpdateTime() {
      updateTime = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }

    /**
      * Gets the value of the 'message' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalMessage() {
      return Optional.<java.lang.String>ofNullable(message);
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder setMessage(java.lang.String value) {
      validate(fields()[17], value);
      this.message = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public io.horizon.trader.report.OrderReport.Builder clearMessage() {
      message = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    @Override
    public OrderReport build() {
      try {
        OrderReport record = new OrderReport();
        record.epochMicros = fieldSetFlags()[0] ? this.epochMicros : (java.lang.Long) defaultValue(fields()[0]);
        record.ordSysId = fieldSetFlags()[1] ? this.ordSysId : (java.lang.Long) defaultValue(fields()[1]);
        record.tradingDay = fieldSetFlags()[2] ? this.tradingDay : (java.lang.String) defaultValue(fields()[2]);
        record.investorId = fieldSetFlags()[3] ? this.investorId : (java.lang.String) defaultValue(fields()[3]);
        record.orderRef = fieldSetFlags()[4] ? this.orderRef : (java.lang.String) defaultValue(fields()[4]);
        record.brokerSysId = fieldSetFlags()[5] ? this.brokerSysId : (java.lang.String) defaultValue(fields()[5]);
        record.exchangeCode = fieldSetFlags()[6] ? this.exchangeCode : (java.lang.String) defaultValue(fields()[6]);
        record.instrumentCode = fieldSetFlags()[7] ? this.instrumentCode : (java.lang.String) defaultValue(fields()[7]);
        record.status = fieldSetFlags()[8] ? this.status : (java.lang.Integer) defaultValue(fields()[8]);
        record.direction = fieldSetFlags()[9] ? this.direction : (java.lang.Integer) defaultValue(fields()[9]);
        record.action = fieldSetFlags()[10] ? this.action : (java.lang.Integer) defaultValue(fields()[10]);
        record.offerQty = fieldSetFlags()[11] ? this.offerQty : (java.lang.Integer) defaultValue(fields()[11]);
        record.filledQty = fieldSetFlags()[12] ? this.filledQty : (java.lang.Integer) defaultValue(fields()[12]);
        record.offerPrice = fieldSetFlags()[13] ? this.offerPrice : (java.lang.Long) defaultValue(fields()[13]);
        record.tradePrice = fieldSetFlags()[14] ? this.tradePrice : (java.lang.Long) defaultValue(fields()[14]);
        record.offerTime = fieldSetFlags()[15] ? this.offerTime : (java.lang.String) defaultValue(fields()[15]);
        record.updateTime = fieldSetFlags()[16] ? this.updateTime : (java.lang.String) defaultValue(fields()[16]);
        record.message = fieldSetFlags()[17] ? this.message : (java.lang.String) defaultValue(fields()[17]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderReport>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderReport>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderReport>
    READER$ = (org.apache.avro.io.DatumReader<OrderReport>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.epochMicros);

    out.writeLong(this.ordSysId);

    out.writeString(this.tradingDay);

    out.writeString(this.investorId);

    out.writeString(this.orderRef);

    out.writeString(this.brokerSysId);

    out.writeString(this.exchangeCode);

    out.writeString(this.instrumentCode);

    out.writeInt(this.status);

    out.writeInt(this.direction);

    out.writeInt(this.action);

    out.writeInt(this.offerQty);

    out.writeInt(this.filledQty);

    out.writeLong(this.offerPrice);

    out.writeLong(this.tradePrice);

    out.writeString(this.offerTime);

    out.writeString(this.updateTime);

    out.writeString(this.message);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.epochMicros = in.readLong();

      this.ordSysId = in.readLong();

      this.tradingDay = in.readString();

      this.investorId = in.readString();

      this.orderRef = in.readString();

      this.brokerSysId = in.readString();

      this.exchangeCode = in.readString();

      this.instrumentCode = in.readString();

      this.status = in.readInt();

      this.direction = in.readInt();

      this.action = in.readInt();

      this.offerQty = in.readInt();

      this.filledQty = in.readInt();

      this.offerPrice = in.readLong();

      this.tradePrice = in.readLong();

      this.offerTime = in.readString();

      this.updateTime = in.readString();

      this.message = in.readString();

    } else {
      for (int i = 0; i < 18; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.epochMicros = in.readLong();
          break;

        case 1:
          this.ordSysId = in.readLong();
          break;

        case 2:
          this.tradingDay = in.readString();
          break;

        case 3:
          this.investorId = in.readString();
          break;

        case 4:
          this.orderRef = in.readString();
          break;

        case 5:
          this.brokerSysId = in.readString();
          break;

        case 6:
          this.exchangeCode = in.readString();
          break;

        case 7:
          this.instrumentCode = in.readString();
          break;

        case 8:
          this.status = in.readInt();
          break;

        case 9:
          this.direction = in.readInt();
          break;

        case 10:
          this.action = in.readInt();
          break;

        case 11:
          this.offerQty = in.readInt();
          break;

        case 12:
          this.filledQty = in.readInt();
          break;

        case 13:
          this.offerPrice = in.readLong();
          break;

        case 14:
          this.tradePrice = in.readLong();
          break;

        case 15:
          this.offerTime = in.readString();
          break;

        case 16:
          this.updateTime = in.readString();
          break;

        case 17:
          this.message = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










