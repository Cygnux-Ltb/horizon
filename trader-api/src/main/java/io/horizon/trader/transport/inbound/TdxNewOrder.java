/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.horizon.trader.transport.inbound;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
/** 新订单 */
@org.apache.avro.specific.AvroGenerated
public class TdxNewOrder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2856476695693419857L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TdxNewOrder\",\"namespace\":\"io.horizon.trader.transport.inbound\",\"doc\":\"新订单\",\"fields\":[{\"name\":\"generateTime\",\"type\":\"long\"},{\"name\":\"sendTime\",\"type\":\"long\"},{\"name\":\"ordSysId\",\"type\":\"long\"},{\"name\":\"offerQty\",\"type\":\"int\"},{\"name\":\"minimumQty\",\"type\":\"int\",\"default\":1},{\"name\":\"offerPrice\",\"type\":\"double\",\"default\":0.0},{\"name\":\"exchangeCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instrumentId\",\"type\":\"int\"},{\"name\":\"instrumentCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"TdxOrdType\",\"namespace\":\"io.horizon.trader.transport.enums\",\"symbols\":[\"INVALID\",\"LIMITED\",\"MARKET\",\"LIMITED_STOP\",\"MARKET_STOP\",\"MTL\",\"BP\",\"AP\",\"FOK\",\"FAK\",\"MV\"]}},{\"name\":\"valid\",\"type\":{\"type\":\"enum\",\"name\":\"TdxOrdValid\",\"namespace\":\"io.horizon.trader.transport.enums\",\"symbols\":[\"GTC\",\"GTD\",\"GFD\"]}},{\"name\":\"action\",\"type\":{\"type\":\"enum\",\"name\":\"TdxTrdAction\",\"namespace\":\"io.horizon.trader.transport.enums\",\"symbols\":[\"INVALID\",\"OPEN\",\"CLOSE\",\"CLOSE_TODAY\",\"CLOSE_YESTERDAY\"]}},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"TdxTrdDirection\",\"namespace\":\"io.horizon.trader.transport.enums\",\"symbols\":[\"INVALID\",\"LONG\",\"SHORT\"]}},{\"name\":\"brokerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountId\",\"type\":\"int\"},{\"name\":\"subAccountId\",\"type\":\"int\"},{\"name\":\"strategyId\",\"type\":\"int\"},{\"name\":\"operatorId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"msg\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TdxNewOrder> ENCODER =
      new BinaryMessageEncoder<TdxNewOrder>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TdxNewOrder> DECODER =
      new BinaryMessageDecoder<TdxNewOrder>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TdxNewOrder> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TdxNewOrder> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TdxNewOrder> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TdxNewOrder>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TdxNewOrder to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TdxNewOrder from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TdxNewOrder instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TdxNewOrder fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long generateTime;
  private long sendTime;
  private long ordSysId;
  private int offerQty;
  private int minimumQty;
  private double offerPrice;
  private java.lang.String exchangeCode;
  private int instrumentId;
  private java.lang.String instrumentCode;
  private io.horizon.trader.transport.enums.TdxOrdType type;
  private io.horizon.trader.transport.enums.TdxOrdValid valid;
  private io.horizon.trader.transport.enums.TdxTrdAction action;
  private io.horizon.trader.transport.enums.TdxTrdDirection direction;
  private java.lang.String brokerId;
  private int accountId;
  private int subAccountId;
  private int strategyId;
  private java.lang.String operatorId;
  private java.lang.String msg;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TdxNewOrder() {}

  /**
   * All-args constructor.
   * @param generateTime The new value for generateTime
   * @param sendTime The new value for sendTime
   * @param ordSysId The new value for ordSysId
   * @param offerQty The new value for offerQty
   * @param minimumQty The new value for minimumQty
   * @param offerPrice The new value for offerPrice
   * @param exchangeCode The new value for exchangeCode
   * @param instrumentId The new value for instrumentId
   * @param instrumentCode The new value for instrumentCode
   * @param type The new value for type
   * @param valid The new value for valid
   * @param action The new value for action
   * @param direction The new value for direction
   * @param brokerId The new value for brokerId
   * @param accountId The new value for accountId
   * @param subAccountId The new value for subAccountId
   * @param strategyId The new value for strategyId
   * @param operatorId The new value for operatorId
   * @param msg The new value for msg
   */
  public TdxNewOrder(java.lang.Long generateTime, java.lang.Long sendTime, java.lang.Long ordSysId, java.lang.Integer offerQty, java.lang.Integer minimumQty, java.lang.Double offerPrice, java.lang.String exchangeCode, java.lang.Integer instrumentId, java.lang.String instrumentCode, io.horizon.trader.transport.enums.TdxOrdType type, io.horizon.trader.transport.enums.TdxOrdValid valid, io.horizon.trader.transport.enums.TdxTrdAction action, io.horizon.trader.transport.enums.TdxTrdDirection direction, java.lang.String brokerId, java.lang.Integer accountId, java.lang.Integer subAccountId, java.lang.Integer strategyId, java.lang.String operatorId, java.lang.String msg) {
    this.generateTime = generateTime;
    this.sendTime = sendTime;
    this.ordSysId = ordSysId;
    this.offerQty = offerQty;
    this.minimumQty = minimumQty;
    this.offerPrice = offerPrice;
    this.exchangeCode = exchangeCode;
    this.instrumentId = instrumentId;
    this.instrumentCode = instrumentCode;
    this.type = type;
    this.valid = valid;
    this.action = action;
    this.direction = direction;
    this.brokerId = brokerId;
    this.accountId = accountId;
    this.subAccountId = subAccountId;
    this.strategyId = strategyId;
    this.operatorId = operatorId;
    this.msg = msg;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return generateTime;
    case 1: return sendTime;
    case 2: return ordSysId;
    case 3: return offerQty;
    case 4: return minimumQty;
    case 5: return offerPrice;
    case 6: return exchangeCode;
    case 7: return instrumentId;
    case 8: return instrumentCode;
    case 9: return type;
    case 10: return valid;
    case 11: return action;
    case 12: return direction;
    case 13: return brokerId;
    case 14: return accountId;
    case 15: return subAccountId;
    case 16: return strategyId;
    case 17: return operatorId;
    case 18: return msg;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: generateTime = (java.lang.Long)value$; break;
    case 1: sendTime = (java.lang.Long)value$; break;
    case 2: ordSysId = (java.lang.Long)value$; break;
    case 3: offerQty = (java.lang.Integer)value$; break;
    case 4: minimumQty = (java.lang.Integer)value$; break;
    case 5: offerPrice = (java.lang.Double)value$; break;
    case 6: exchangeCode = value$ != null ? value$.toString() : null; break;
    case 7: instrumentId = (java.lang.Integer)value$; break;
    case 8: instrumentCode = value$ != null ? value$.toString() : null; break;
    case 9: type = (io.horizon.trader.transport.enums.TdxOrdType)value$; break;
    case 10: valid = (io.horizon.trader.transport.enums.TdxOrdValid)value$; break;
    case 11: action = (io.horizon.trader.transport.enums.TdxTrdAction)value$; break;
    case 12: direction = (io.horizon.trader.transport.enums.TdxTrdDirection)value$; break;
    case 13: brokerId = value$ != null ? value$.toString() : null; break;
    case 14: accountId = (java.lang.Integer)value$; break;
    case 15: subAccountId = (java.lang.Integer)value$; break;
    case 16: strategyId = (java.lang.Integer)value$; break;
    case 17: operatorId = value$ != null ? value$.toString() : null; break;
    case 18: msg = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'generateTime' field.
   * @return The value of the 'generateTime' field.
   */
  public long getGenerateTime() {
    return generateTime;
  }

  /**
   * Gets the value of the 'generateTime' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalGenerateTime() {
    return Optional.<java.lang.Long>ofNullable(generateTime);
  }

  /**
   * Sets the value of the 'generateTime' field.
   * @param value the value to set.
   */
  public TdxNewOrder setGenerateTime(long value) {
    this.generateTime = value;
    return this;
  }

  /**
   * Gets the value of the 'sendTime' field.
   * @return The value of the 'sendTime' field.
   */
  public long getSendTime() {
    return sendTime;
  }

  /**
   * Gets the value of the 'sendTime' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalSendTime() {
    return Optional.<java.lang.Long>ofNullable(sendTime);
  }

  /**
   * Sets the value of the 'sendTime' field.
   * @param value the value to set.
   */
  public TdxNewOrder setSendTime(long value) {
    this.sendTime = value;
    return this;
  }

  /**
   * Gets the value of the 'ordSysId' field.
   * @return The value of the 'ordSysId' field.
   */
  public long getOrdSysId() {
    return ordSysId;
  }

  /**
   * Gets the value of the 'ordSysId' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalOrdSysId() {
    return Optional.<java.lang.Long>ofNullable(ordSysId);
  }

  /**
   * Sets the value of the 'ordSysId' field.
   * @param value the value to set.
   */
  public TdxNewOrder setOrdSysId(long value) {
    this.ordSysId = value;
    return this;
  }

  /**
   * Gets the value of the 'offerQty' field.
   * @return The value of the 'offerQty' field.
   */
  public int getOfferQty() {
    return offerQty;
  }

  /**
   * Gets the value of the 'offerQty' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalOfferQty() {
    return Optional.<java.lang.Integer>ofNullable(offerQty);
  }

  /**
   * Sets the value of the 'offerQty' field.
   * @param value the value to set.
   */
  public TdxNewOrder setOfferQty(int value) {
    this.offerQty = value;
    return this;
  }

  /**
   * Gets the value of the 'minimumQty' field.
   * @return The value of the 'minimumQty' field.
   */
  public int getMinimumQty() {
    return minimumQty;
  }

  /**
   * Gets the value of the 'minimumQty' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalMinimumQty() {
    return Optional.<java.lang.Integer>ofNullable(minimumQty);
  }

  /**
   * Sets the value of the 'minimumQty' field.
   * @param value the value to set.
   */
  public TdxNewOrder setMinimumQty(int value) {
    this.minimumQty = value;
    return this;
  }

  /**
   * Gets the value of the 'offerPrice' field.
   * @return The value of the 'offerPrice' field.
   */
  public double getOfferPrice() {
    return offerPrice;
  }

  /**
   * Gets the value of the 'offerPrice' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalOfferPrice() {
    return Optional.<java.lang.Double>ofNullable(offerPrice);
  }

  /**
   * Sets the value of the 'offerPrice' field.
   * @param value the value to set.
   */
  public TdxNewOrder setOfferPrice(double value) {
    this.offerPrice = value;
    return this;
  }

  /**
   * Gets the value of the 'exchangeCode' field.
   * @return The value of the 'exchangeCode' field.
   */
  public java.lang.String getExchangeCode() {
    return exchangeCode;
  }

  /**
   * Gets the value of the 'exchangeCode' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalExchangeCode() {
    return Optional.<java.lang.String>ofNullable(exchangeCode);
  }

  /**
   * Sets the value of the 'exchangeCode' field.
   * @param value the value to set.
   */
  public TdxNewOrder setExchangeCode(java.lang.String value) {
    this.exchangeCode = value;
    return this;
  }

  /**
   * Gets the value of the 'instrumentId' field.
   * @return The value of the 'instrumentId' field.
   */
  public int getInstrumentId() {
    return instrumentId;
  }

  /**
   * Gets the value of the 'instrumentId' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalInstrumentId() {
    return Optional.<java.lang.Integer>ofNullable(instrumentId);
  }

  /**
   * Sets the value of the 'instrumentId' field.
   * @param value the value to set.
   */
  public TdxNewOrder setInstrumentId(int value) {
    this.instrumentId = value;
    return this;
  }

  /**
   * Gets the value of the 'instrumentCode' field.
   * @return The value of the 'instrumentCode' field.
   */
  public java.lang.String getInstrumentCode() {
    return instrumentCode;
  }

  /**
   * Gets the value of the 'instrumentCode' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalInstrumentCode() {
    return Optional.<java.lang.String>ofNullable(instrumentCode);
  }

  /**
   * Sets the value of the 'instrumentCode' field.
   * @param value the value to set.
   */
  public TdxNewOrder setInstrumentCode(java.lang.String value) {
    this.instrumentCode = value;
    return this;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public io.horizon.trader.transport.enums.TdxOrdType getType() {
    return type;
  }

  /**
   * Gets the value of the 'type' field as an Optional&lt;io.horizon.trader.transport.enums.TdxOrdType&gt;.
   * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxOrdType&gt;.
   */
  public Optional<io.horizon.trader.transport.enums.TdxOrdType> getOptionalType() {
    return Optional.<io.horizon.trader.transport.enums.TdxOrdType>ofNullable(type);
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public TdxNewOrder setType(io.horizon.trader.transport.enums.TdxOrdType value) {
    this.type = value;
    return this;
  }

  /**
   * Gets the value of the 'valid' field.
   * @return The value of the 'valid' field.
   */
  public io.horizon.trader.transport.enums.TdxOrdValid getValid() {
    return valid;
  }

  /**
   * Gets the value of the 'valid' field as an Optional&lt;io.horizon.trader.transport.enums.TdxOrdValid&gt;.
   * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxOrdValid&gt;.
   */
  public Optional<io.horizon.trader.transport.enums.TdxOrdValid> getOptionalValid() {
    return Optional.<io.horizon.trader.transport.enums.TdxOrdValid>ofNullable(valid);
  }

  /**
   * Sets the value of the 'valid' field.
   * @param value the value to set.
   */
  public TdxNewOrder setValid(io.horizon.trader.transport.enums.TdxOrdValid value) {
    this.valid = value;
    return this;
  }

  /**
   * Gets the value of the 'action' field.
   * @return The value of the 'action' field.
   */
  public io.horizon.trader.transport.enums.TdxTrdAction getAction() {
    return action;
  }

  /**
   * Gets the value of the 'action' field as an Optional&lt;io.horizon.trader.transport.enums.TdxTrdAction&gt;.
   * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxTrdAction&gt;.
   */
  public Optional<io.horizon.trader.transport.enums.TdxTrdAction> getOptionalAction() {
    return Optional.<io.horizon.trader.transport.enums.TdxTrdAction>ofNullable(action);
  }

  /**
   * Sets the value of the 'action' field.
   * @param value the value to set.
   */
  public TdxNewOrder setAction(io.horizon.trader.transport.enums.TdxTrdAction value) {
    this.action = value;
    return this;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return The value of the 'direction' field.
   */
  public io.horizon.trader.transport.enums.TdxTrdDirection getDirection() {
    return direction;
  }

  /**
   * Gets the value of the 'direction' field as an Optional&lt;io.horizon.trader.transport.enums.TdxTrdDirection&gt;.
   * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxTrdDirection&gt;.
   */
  public Optional<io.horizon.trader.transport.enums.TdxTrdDirection> getOptionalDirection() {
    return Optional.<io.horizon.trader.transport.enums.TdxTrdDirection>ofNullable(direction);
  }

  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public TdxNewOrder setDirection(io.horizon.trader.transport.enums.TdxTrdDirection value) {
    this.direction = value;
    return this;
  }

  /**
   * Gets the value of the 'brokerId' field.
   * @return The value of the 'brokerId' field.
   */
  public java.lang.String getBrokerId() {
    return brokerId;
  }

  /**
   * Gets the value of the 'brokerId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalBrokerId() {
    return Optional.<java.lang.String>ofNullable(brokerId);
  }

  /**
   * Sets the value of the 'brokerId' field.
   * @param value the value to set.
   */
  public TdxNewOrder setBrokerId(java.lang.String value) {
    this.brokerId = value;
    return this;
  }

  /**
   * Gets the value of the 'accountId' field.
   * @return The value of the 'accountId' field.
   */
  public int getAccountId() {
    return accountId;
  }

  /**
   * Gets the value of the 'accountId' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalAccountId() {
    return Optional.<java.lang.Integer>ofNullable(accountId);
  }

  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public TdxNewOrder setAccountId(int value) {
    this.accountId = value;
    return this;
  }

  /**
   * Gets the value of the 'subAccountId' field.
   * @return The value of the 'subAccountId' field.
   */
  public int getSubAccountId() {
    return subAccountId;
  }

  /**
   * Gets the value of the 'subAccountId' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalSubAccountId() {
    return Optional.<java.lang.Integer>ofNullable(subAccountId);
  }

  /**
   * Sets the value of the 'subAccountId' field.
   * @param value the value to set.
   */
  public TdxNewOrder setSubAccountId(int value) {
    this.subAccountId = value;
    return this;
  }

  /**
   * Gets the value of the 'strategyId' field.
   * @return The value of the 'strategyId' field.
   */
  public int getStrategyId() {
    return strategyId;
  }

  /**
   * Gets the value of the 'strategyId' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalStrategyId() {
    return Optional.<java.lang.Integer>ofNullable(strategyId);
  }

  /**
   * Sets the value of the 'strategyId' field.
   * @param value the value to set.
   */
  public TdxNewOrder setStrategyId(int value) {
    this.strategyId = value;
    return this;
  }

  /**
   * Gets the value of the 'operatorId' field.
   * @return The value of the 'operatorId' field.
   */
  public java.lang.String getOperatorId() {
    return operatorId;
  }

  /**
   * Gets the value of the 'operatorId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalOperatorId() {
    return Optional.<java.lang.String>ofNullable(operatorId);
  }

  /**
   * Sets the value of the 'operatorId' field.
   * @param value the value to set.
   */
  public TdxNewOrder setOperatorId(java.lang.String value) {
    this.operatorId = value;
    return this;
  }

  /**
   * Gets the value of the 'msg' field.
   * @return The value of the 'msg' field.
   */
  public java.lang.String getMsg() {
    return msg;
  }

  /**
   * Gets the value of the 'msg' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalMsg() {
    return Optional.<java.lang.String>ofNullable(msg);
  }

  /**
   * Sets the value of the 'msg' field.
   * @param value the value to set.
   */
  public TdxNewOrder setMsg(java.lang.String value) {
    this.msg = value;
    return this;
  }

  /**
   * Creates a new TdxNewOrder RecordBuilder.
   * @return A new TdxNewOrder RecordBuilder
   */
  public static io.horizon.trader.transport.inbound.TdxNewOrder.Builder newBuilder() {
    return new io.horizon.trader.transport.inbound.TdxNewOrder.Builder();
  }

  /**
   * Creates a new TdxNewOrder RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TdxNewOrder RecordBuilder
   */
  public static io.horizon.trader.transport.inbound.TdxNewOrder.Builder newBuilder(io.horizon.trader.transport.inbound.TdxNewOrder.Builder other) {
    if (other == null) {
      return new io.horizon.trader.transport.inbound.TdxNewOrder.Builder();
    } else {
      return new io.horizon.trader.transport.inbound.TdxNewOrder.Builder(other);
    }
  }

  /**
   * Creates a new TdxNewOrder RecordBuilder by copying an existing TdxNewOrder instance.
   * @param other The existing instance to copy.
   * @return A new TdxNewOrder RecordBuilder
   */
  public static io.horizon.trader.transport.inbound.TdxNewOrder.Builder newBuilder(io.horizon.trader.transport.inbound.TdxNewOrder other) {
    if (other == null) {
      return new io.horizon.trader.transport.inbound.TdxNewOrder.Builder();
    } else {
      return new io.horizon.trader.transport.inbound.TdxNewOrder.Builder(other);
    }
  }

  /**
   * RecordBuilder for TdxNewOrder instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TdxNewOrder>
    implements org.apache.avro.data.RecordBuilder<TdxNewOrder> {

    private long generateTime;
    private long sendTime;
    private long ordSysId;
    private int offerQty;
    private int minimumQty;
    private double offerPrice;
    private java.lang.String exchangeCode;
    private int instrumentId;
    private java.lang.String instrumentCode;
    private io.horizon.trader.transport.enums.TdxOrdType type;
    private io.horizon.trader.transport.enums.TdxOrdValid valid;
    private io.horizon.trader.transport.enums.TdxTrdAction action;
    private io.horizon.trader.transport.enums.TdxTrdDirection direction;
    private java.lang.String brokerId;
    private int accountId;
    private int subAccountId;
    private int strategyId;
    private java.lang.String operatorId;
    private java.lang.String msg;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.horizon.trader.transport.inbound.TdxNewOrder.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.generateTime)) {
        this.generateTime = data().deepCopy(fields()[0].schema(), other.generateTime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sendTime)) {
        this.sendTime = data().deepCopy(fields()[1].schema(), other.sendTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ordSysId)) {
        this.ordSysId = data().deepCopy(fields()[2].schema(), other.ordSysId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.offerQty)) {
        this.offerQty = data().deepCopy(fields()[3].schema(), other.offerQty);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.minimumQty)) {
        this.minimumQty = data().deepCopy(fields()[4].schema(), other.minimumQty);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.offerPrice)) {
        this.offerPrice = data().deepCopy(fields()[5].schema(), other.offerPrice);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.exchangeCode)) {
        this.exchangeCode = data().deepCopy(fields()[6].schema(), other.exchangeCode);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.instrumentId)) {
        this.instrumentId = data().deepCopy(fields()[7].schema(), other.instrumentId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[8].schema(), other.instrumentCode);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.type)) {
        this.type = data().deepCopy(fields()[9].schema(), other.type);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.valid)) {
        this.valid = data().deepCopy(fields()[10].schema(), other.valid);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.action)) {
        this.action = data().deepCopy(fields()[11].schema(), other.action);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.direction)) {
        this.direction = data().deepCopy(fields()[12].schema(), other.direction);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[13].schema(), other.brokerId);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.accountId)) {
        this.accountId = data().deepCopy(fields()[14].schema(), other.accountId);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.subAccountId)) {
        this.subAccountId = data().deepCopy(fields()[15].schema(), other.subAccountId);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.strategyId)) {
        this.strategyId = data().deepCopy(fields()[16].schema(), other.strategyId);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.operatorId)) {
        this.operatorId = data().deepCopy(fields()[17].schema(), other.operatorId);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.msg)) {
        this.msg = data().deepCopy(fields()[18].schema(), other.msg);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
    }

    /**
     * Creates a Builder by copying an existing TdxNewOrder instance
     * @param other The existing instance to copy.
     */
    private Builder(io.horizon.trader.transport.inbound.TdxNewOrder other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.generateTime)) {
        this.generateTime = data().deepCopy(fields()[0].schema(), other.generateTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sendTime)) {
        this.sendTime = data().deepCopy(fields()[1].schema(), other.sendTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ordSysId)) {
        this.ordSysId = data().deepCopy(fields()[2].schema(), other.ordSysId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.offerQty)) {
        this.offerQty = data().deepCopy(fields()[3].schema(), other.offerQty);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.minimumQty)) {
        this.minimumQty = data().deepCopy(fields()[4].schema(), other.minimumQty);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.offerPrice)) {
        this.offerPrice = data().deepCopy(fields()[5].schema(), other.offerPrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.exchangeCode)) {
        this.exchangeCode = data().deepCopy(fields()[6].schema(), other.exchangeCode);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.instrumentId)) {
        this.instrumentId = data().deepCopy(fields()[7].schema(), other.instrumentId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[8].schema(), other.instrumentCode);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.type)) {
        this.type = data().deepCopy(fields()[9].schema(), other.type);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.valid)) {
        this.valid = data().deepCopy(fields()[10].schema(), other.valid);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.action)) {
        this.action = data().deepCopy(fields()[11].schema(), other.action);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.direction)) {
        this.direction = data().deepCopy(fields()[12].schema(), other.direction);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[13].schema(), other.brokerId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.accountId)) {
        this.accountId = data().deepCopy(fields()[14].schema(), other.accountId);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.subAccountId)) {
        this.subAccountId = data().deepCopy(fields()[15].schema(), other.subAccountId);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.strategyId)) {
        this.strategyId = data().deepCopy(fields()[16].schema(), other.strategyId);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.operatorId)) {
        this.operatorId = data().deepCopy(fields()[17].schema(), other.operatorId);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.msg)) {
        this.msg = data().deepCopy(fields()[18].schema(), other.msg);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'generateTime' field.
      * @return The value.
      */
    public long getGenerateTime() {
      return generateTime;
    }

    /**
      * Gets the value of the 'generateTime' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalGenerateTime() {
      return Optional.<java.lang.Long>ofNullable(generateTime);
    }

    /**
      * Sets the value of the 'generateTime' field.
      * @param value The value of 'generateTime'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setGenerateTime(long value) {
      validate(fields()[0], value);
      this.generateTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'generateTime' field has been set.
      * @return True if the 'generateTime' field has been set, false otherwise.
      */
    public boolean hasGenerateTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'generateTime' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearGenerateTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sendTime' field.
      * @return The value.
      */
    public long getSendTime() {
      return sendTime;
    }

    /**
      * Gets the value of the 'sendTime' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalSendTime() {
      return Optional.<java.lang.Long>ofNullable(sendTime);
    }

    /**
      * Sets the value of the 'sendTime' field.
      * @param value The value of 'sendTime'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setSendTime(long value) {
      validate(fields()[1], value);
      this.sendTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sendTime' field has been set.
      * @return True if the 'sendTime' field has been set, false otherwise.
      */
    public boolean hasSendTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sendTime' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearSendTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ordSysId' field.
      * @return The value.
      */
    public long getOrdSysId() {
      return ordSysId;
    }

    /**
      * Gets the value of the 'ordSysId' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalOrdSysId() {
      return Optional.<java.lang.Long>ofNullable(ordSysId);
    }

    /**
      * Sets the value of the 'ordSysId' field.
      * @param value The value of 'ordSysId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setOrdSysId(long value) {
      validate(fields()[2], value);
      this.ordSysId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ordSysId' field has been set.
      * @return True if the 'ordSysId' field has been set, false otherwise.
      */
    public boolean hasOrdSysId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ordSysId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearOrdSysId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerQty' field.
      * @return The value.
      */
    public int getOfferQty() {
      return offerQty;
    }

    /**
      * Gets the value of the 'offerQty' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalOfferQty() {
      return Optional.<java.lang.Integer>ofNullable(offerQty);
    }

    /**
      * Sets the value of the 'offerQty' field.
      * @param value The value of 'offerQty'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setOfferQty(int value) {
      validate(fields()[3], value);
      this.offerQty = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'offerQty' field has been set.
      * @return True if the 'offerQty' field has been set, false otherwise.
      */
    public boolean hasOfferQty() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'offerQty' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearOfferQty() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'minimumQty' field.
      * @return The value.
      */
    public int getMinimumQty() {
      return minimumQty;
    }

    /**
      * Gets the value of the 'minimumQty' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalMinimumQty() {
      return Optional.<java.lang.Integer>ofNullable(minimumQty);
    }

    /**
      * Sets the value of the 'minimumQty' field.
      * @param value The value of 'minimumQty'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setMinimumQty(int value) {
      validate(fields()[4], value);
      this.minimumQty = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'minimumQty' field has been set.
      * @return True if the 'minimumQty' field has been set, false otherwise.
      */
    public boolean hasMinimumQty() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'minimumQty' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearMinimumQty() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerPrice' field.
      * @return The value.
      */
    public double getOfferPrice() {
      return offerPrice;
    }

    /**
      * Gets the value of the 'offerPrice' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalOfferPrice() {
      return Optional.<java.lang.Double>ofNullable(offerPrice);
    }

    /**
      * Sets the value of the 'offerPrice' field.
      * @param value The value of 'offerPrice'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setOfferPrice(double value) {
      validate(fields()[5], value);
      this.offerPrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'offerPrice' field has been set.
      * @return True if the 'offerPrice' field has been set, false otherwise.
      */
    public boolean hasOfferPrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'offerPrice' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearOfferPrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'exchangeCode' field.
      * @return The value.
      */
    public java.lang.String getExchangeCode() {
      return exchangeCode;
    }

    /**
      * Gets the value of the 'exchangeCode' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalExchangeCode() {
      return Optional.<java.lang.String>ofNullable(exchangeCode);
    }

    /**
      * Sets the value of the 'exchangeCode' field.
      * @param value The value of 'exchangeCode'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setExchangeCode(java.lang.String value) {
      validate(fields()[6], value);
      this.exchangeCode = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'exchangeCode' field has been set.
      * @return True if the 'exchangeCode' field has been set, false otherwise.
      */
    public boolean hasExchangeCode() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'exchangeCode' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearExchangeCode() {
      exchangeCode = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentId' field.
      * @return The value.
      */
    public int getInstrumentId() {
      return instrumentId;
    }

    /**
      * Gets the value of the 'instrumentId' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalInstrumentId() {
      return Optional.<java.lang.Integer>ofNullable(instrumentId);
    }

    /**
      * Sets the value of the 'instrumentId' field.
      * @param value The value of 'instrumentId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setInstrumentId(int value) {
      validate(fields()[7], value);
      this.instrumentId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentId' field has been set.
      * @return True if the 'instrumentId' field has been set, false otherwise.
      */
    public boolean hasInstrumentId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'instrumentId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearInstrumentId() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentCode' field.
      * @return The value.
      */
    public java.lang.String getInstrumentCode() {
      return instrumentCode;
    }

    /**
      * Gets the value of the 'instrumentCode' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalInstrumentCode() {
      return Optional.<java.lang.String>ofNullable(instrumentCode);
    }

    /**
      * Sets the value of the 'instrumentCode' field.
      * @param value The value of 'instrumentCode'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setInstrumentCode(java.lang.String value) {
      validate(fields()[8], value);
      this.instrumentCode = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentCode' field has been set.
      * @return True if the 'instrumentCode' field has been set, false otherwise.
      */
    public boolean hasInstrumentCode() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'instrumentCode' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearInstrumentCode() {
      instrumentCode = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public io.horizon.trader.transport.enums.TdxOrdType getType() {
      return type;
    }

    /**
      * Gets the value of the 'type' field as an Optional&lt;io.horizon.trader.transport.enums.TdxOrdType&gt;.
      * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxOrdType&gt;.
      */
    public Optional<io.horizon.trader.transport.enums.TdxOrdType> getOptionalType() {
      return Optional.<io.horizon.trader.transport.enums.TdxOrdType>ofNullable(type);
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setType(io.horizon.trader.transport.enums.TdxOrdType value) {
      validate(fields()[9], value);
      this.type = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearType() {
      type = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'valid' field.
      * @return The value.
      */
    public io.horizon.trader.transport.enums.TdxOrdValid getValid() {
      return valid;
    }

    /**
      * Gets the value of the 'valid' field as an Optional&lt;io.horizon.trader.transport.enums.TdxOrdValid&gt;.
      * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxOrdValid&gt;.
      */
    public Optional<io.horizon.trader.transport.enums.TdxOrdValid> getOptionalValid() {
      return Optional.<io.horizon.trader.transport.enums.TdxOrdValid>ofNullable(valid);
    }

    /**
      * Sets the value of the 'valid' field.
      * @param value The value of 'valid'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setValid(io.horizon.trader.transport.enums.TdxOrdValid value) {
      validate(fields()[10], value);
      this.valid = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'valid' field has been set.
      * @return True if the 'valid' field has been set, false otherwise.
      */
    public boolean hasValid() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'valid' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearValid() {
      valid = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'action' field.
      * @return The value.
      */
    public io.horizon.trader.transport.enums.TdxTrdAction getAction() {
      return action;
    }

    /**
      * Gets the value of the 'action' field as an Optional&lt;io.horizon.trader.transport.enums.TdxTrdAction&gt;.
      * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxTrdAction&gt;.
      */
    public Optional<io.horizon.trader.transport.enums.TdxTrdAction> getOptionalAction() {
      return Optional.<io.horizon.trader.transport.enums.TdxTrdAction>ofNullable(action);
    }

    /**
      * Sets the value of the 'action' field.
      * @param value The value of 'action'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setAction(io.horizon.trader.transport.enums.TdxTrdAction value) {
      validate(fields()[11], value);
      this.action = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'action' field has been set.
      * @return True if the 'action' field has been set, false otherwise.
      */
    public boolean hasAction() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'action' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearAction() {
      action = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * @return The value.
      */
    public io.horizon.trader.transport.enums.TdxTrdDirection getDirection() {
      return direction;
    }

    /**
      * Gets the value of the 'direction' field as an Optional&lt;io.horizon.trader.transport.enums.TdxTrdDirection&gt;.
      * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxTrdDirection&gt;.
      */
    public Optional<io.horizon.trader.transport.enums.TdxTrdDirection> getOptionalDirection() {
      return Optional.<io.horizon.trader.transport.enums.TdxTrdDirection>ofNullable(direction);
    }

    /**
      * Sets the value of the 'direction' field.
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setDirection(io.horizon.trader.transport.enums.TdxTrdDirection value) {
      validate(fields()[12], value);
      this.direction = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'direction' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearDirection() {
      direction = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerId' field.
      * @return The value.
      */
    public java.lang.String getBrokerId() {
      return brokerId;
    }

    /**
      * Gets the value of the 'brokerId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalBrokerId() {
      return Optional.<java.lang.String>ofNullable(brokerId);
    }

    /**
      * Sets the value of the 'brokerId' field.
      * @param value The value of 'brokerId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setBrokerId(java.lang.String value) {
      validate(fields()[13], value);
      this.brokerId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerId' field has been set.
      * @return True if the 'brokerId' field has been set, false otherwise.
      */
    public boolean hasBrokerId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'brokerId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearBrokerId() {
      brokerId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountId' field.
      * @return The value.
      */
    public int getAccountId() {
      return accountId;
    }

    /**
      * Gets the value of the 'accountId' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalAccountId() {
      return Optional.<java.lang.Integer>ofNullable(accountId);
    }

    /**
      * Sets the value of the 'accountId' field.
      * @param value The value of 'accountId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setAccountId(int value) {
      validate(fields()[14], value);
      this.accountId = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'accountId' field has been set.
      * @return True if the 'accountId' field has been set, false otherwise.
      */
    public boolean hasAccountId() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'accountId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearAccountId() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'subAccountId' field.
      * @return The value.
      */
    public int getSubAccountId() {
      return subAccountId;
    }

    /**
      * Gets the value of the 'subAccountId' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalSubAccountId() {
      return Optional.<java.lang.Integer>ofNullable(subAccountId);
    }

    /**
      * Sets the value of the 'subAccountId' field.
      * @param value The value of 'subAccountId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setSubAccountId(int value) {
      validate(fields()[15], value);
      this.subAccountId = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'subAccountId' field has been set.
      * @return True if the 'subAccountId' field has been set, false otherwise.
      */
    public boolean hasSubAccountId() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'subAccountId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearSubAccountId() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'strategyId' field.
      * @return The value.
      */
    public int getStrategyId() {
      return strategyId;
    }

    /**
      * Gets the value of the 'strategyId' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalStrategyId() {
      return Optional.<java.lang.Integer>ofNullable(strategyId);
    }

    /**
      * Sets the value of the 'strategyId' field.
      * @param value The value of 'strategyId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setStrategyId(int value) {
      validate(fields()[16], value);
      this.strategyId = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'strategyId' field has been set.
      * @return True if the 'strategyId' field has been set, false otherwise.
      */
    public boolean hasStrategyId() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'strategyId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearStrategyId() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'operatorId' field.
      * @return The value.
      */
    public java.lang.String getOperatorId() {
      return operatorId;
    }

    /**
      * Gets the value of the 'operatorId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalOperatorId() {
      return Optional.<java.lang.String>ofNullable(operatorId);
    }

    /**
      * Sets the value of the 'operatorId' field.
      * @param value The value of 'operatorId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setOperatorId(java.lang.String value) {
      validate(fields()[17], value);
      this.operatorId = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'operatorId' field has been set.
      * @return True if the 'operatorId' field has been set, false otherwise.
      */
    public boolean hasOperatorId() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'operatorId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearOperatorId() {
      operatorId = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'msg' field.
      * @return The value.
      */
    public java.lang.String getMsg() {
      return msg;
    }

    /**
      * Gets the value of the 'msg' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalMsg() {
      return Optional.<java.lang.String>ofNullable(msg);
    }

    /**
      * Sets the value of the 'msg' field.
      * @param value The value of 'msg'.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder setMsg(java.lang.String value) {
      validate(fields()[18], value);
      this.msg = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'msg' field has been set.
      * @return True if the 'msg' field has been set, false otherwise.
      */
    public boolean hasMsg() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'msg' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.inbound.TdxNewOrder.Builder clearMsg() {
      msg = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    public TdxNewOrder build() {
      try {
        TdxNewOrder record = new TdxNewOrder();
        record.generateTime = fieldSetFlags()[0] ? this.generateTime : (java.lang.Long) defaultValue(fields()[0]);
        record.sendTime = fieldSetFlags()[1] ? this.sendTime : (java.lang.Long) defaultValue(fields()[1]);
        record.ordSysId = fieldSetFlags()[2] ? this.ordSysId : (java.lang.Long) defaultValue(fields()[2]);
        record.offerQty = fieldSetFlags()[3] ? this.offerQty : (java.lang.Integer) defaultValue(fields()[3]);
        record.minimumQty = fieldSetFlags()[4] ? this.minimumQty : (java.lang.Integer) defaultValue(fields()[4]);
        record.offerPrice = fieldSetFlags()[5] ? this.offerPrice : (java.lang.Double) defaultValue(fields()[5]);
        record.exchangeCode = fieldSetFlags()[6] ? this.exchangeCode : (java.lang.String) defaultValue(fields()[6]);
        record.instrumentId = fieldSetFlags()[7] ? this.instrumentId : (java.lang.Integer) defaultValue(fields()[7]);
        record.instrumentCode = fieldSetFlags()[8] ? this.instrumentCode : (java.lang.String) defaultValue(fields()[8]);
        record.type = fieldSetFlags()[9] ? this.type : (io.horizon.trader.transport.enums.TdxOrdType) defaultValue(fields()[9]);
        record.valid = fieldSetFlags()[10] ? this.valid : (io.horizon.trader.transport.enums.TdxOrdValid) defaultValue(fields()[10]);
        record.action = fieldSetFlags()[11] ? this.action : (io.horizon.trader.transport.enums.TdxTrdAction) defaultValue(fields()[11]);
        record.direction = fieldSetFlags()[12] ? this.direction : (io.horizon.trader.transport.enums.TdxTrdDirection) defaultValue(fields()[12]);
        record.brokerId = fieldSetFlags()[13] ? this.brokerId : (java.lang.String) defaultValue(fields()[13]);
        record.accountId = fieldSetFlags()[14] ? this.accountId : (java.lang.Integer) defaultValue(fields()[14]);
        record.subAccountId = fieldSetFlags()[15] ? this.subAccountId : (java.lang.Integer) defaultValue(fields()[15]);
        record.strategyId = fieldSetFlags()[16] ? this.strategyId : (java.lang.Integer) defaultValue(fields()[16]);
        record.operatorId = fieldSetFlags()[17] ? this.operatorId : (java.lang.String) defaultValue(fields()[17]);
        record.msg = fieldSetFlags()[18] ? this.msg : (java.lang.String) defaultValue(fields()[18]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TdxNewOrder>
    WRITER$ = (org.apache.avro.io.DatumWriter<TdxNewOrder>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TdxNewOrder>
    READER$ = (org.apache.avro.io.DatumReader<TdxNewOrder>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.generateTime);

    out.writeLong(this.sendTime);

    out.writeLong(this.ordSysId);

    out.writeInt(this.offerQty);

    out.writeInt(this.minimumQty);

    out.writeDouble(this.offerPrice);

    out.writeString(this.exchangeCode);

    out.writeInt(this.instrumentId);

    out.writeString(this.instrumentCode);

    out.writeEnum(this.type.ordinal());

    out.writeEnum(this.valid.ordinal());

    out.writeEnum(this.action.ordinal());

    out.writeEnum(this.direction.ordinal());

    out.writeString(this.brokerId);

    out.writeInt(this.accountId);

    out.writeInt(this.subAccountId);

    out.writeInt(this.strategyId);

    out.writeString(this.operatorId);

    out.writeString(this.msg);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.generateTime = in.readLong();

      this.sendTime = in.readLong();

      this.ordSysId = in.readLong();

      this.offerQty = in.readInt();

      this.minimumQty = in.readInt();

      this.offerPrice = in.readDouble();

      this.exchangeCode = in.readString();

      this.instrumentId = in.readInt();

      this.instrumentCode = in.readString();

      this.type = io.horizon.trader.transport.enums.TdxOrdType.values()[in.readEnum()];

      this.valid = io.horizon.trader.transport.enums.TdxOrdValid.values()[in.readEnum()];

      this.action = io.horizon.trader.transport.enums.TdxTrdAction.values()[in.readEnum()];

      this.direction = io.horizon.trader.transport.enums.TdxTrdDirection.values()[in.readEnum()];

      this.brokerId = in.readString();

      this.accountId = in.readInt();

      this.subAccountId = in.readInt();

      this.strategyId = in.readInt();

      this.operatorId = in.readString();

      this.msg = in.readString();

    } else {
      for (int i = 0; i < 19; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.generateTime = in.readLong();
          break;

        case 1:
          this.sendTime = in.readLong();
          break;

        case 2:
          this.ordSysId = in.readLong();
          break;

        case 3:
          this.offerQty = in.readInt();
          break;

        case 4:
          this.minimumQty = in.readInt();
          break;

        case 5:
          this.offerPrice = in.readDouble();
          break;

        case 6:
          this.exchangeCode = in.readString();
          break;

        case 7:
          this.instrumentId = in.readInt();
          break;

        case 8:
          this.instrumentCode = in.readString();
          break;

        case 9:
          this.type = io.horizon.trader.transport.enums.TdxOrdType.values()[in.readEnum()];
          break;

        case 10:
          this.valid = io.horizon.trader.transport.enums.TdxOrdValid.values()[in.readEnum()];
          break;

        case 11:
          this.action = io.horizon.trader.transport.enums.TdxTrdAction.values()[in.readEnum()];
          break;

        case 12:
          this.direction = io.horizon.trader.transport.enums.TdxTrdDirection.values()[in.readEnum()];
          break;

        case 13:
          this.brokerId = in.readString();
          break;

        case 14:
          this.accountId = in.readInt();
          break;

        case 15:
          this.subAccountId = in.readInt();
          break;

        case 16:
          this.strategyId = in.readInt();
          break;

        case 17:
          this.operatorId = in.readString();
          break;

        case 18:
          this.msg = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










