/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.horizon.trader.transport.outbound;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** * 适配器回报 */
@org.apache.avro.specific.AvroGenerated
public class AdaptorReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6932488725719281738L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AdaptorReport\",\"namespace\":\"io.horizon.trader.transport.outbound\",\"doc\":\"* 适配器回报\",\"fields\":[{\"name\":\"epochMillis\",\"type\":\"long\"},{\"name\":\"adaptorId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"accountId\",\"type\":\"int\"},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"TAdaptorStatus\",\"namespace\":\"io.horizon.trader.transport.enums\",\"symbols\":[\"INVALID\",\"UNAVAILABLE\",\"MD_ENABLE\",\"MD_DISABLE\",\"TRADER_ENABLE\",\"TRADER_DISABLE\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AdaptorReport> ENCODER =
      new BinaryMessageEncoder<AdaptorReport>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AdaptorReport> DECODER =
      new BinaryMessageDecoder<AdaptorReport>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AdaptorReport> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AdaptorReport> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AdaptorReport> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AdaptorReport>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AdaptorReport to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AdaptorReport from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AdaptorReport instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AdaptorReport fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long epochMillis;
  private java.lang.String adaptorId;
  private int accountId;
  private io.horizon.trader.transport.enums.TAdaptorStatus status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AdaptorReport() {}

  /**
   * All-args constructor.
   * @param epochMillis The new value for epochMillis
   * @param adaptorId The new value for adaptorId
   * @param accountId The new value for accountId
   * @param status The new value for status
   */
  public AdaptorReport(java.lang.Long epochMillis, java.lang.String adaptorId, java.lang.Integer accountId, io.horizon.trader.transport.enums.TAdaptorStatus status) {
    this.epochMillis = epochMillis;
    this.adaptorId = adaptorId;
    this.accountId = accountId;
    this.status = status;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return epochMillis;
    case 1: return adaptorId;
    case 2: return accountId;
    case 3: return status;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: epochMillis = (java.lang.Long)value$; break;
    case 1: adaptorId = value$ != null ? value$.toString() : null; break;
    case 2: accountId = (java.lang.Integer)value$; break;
    case 3: status = (io.horizon.trader.transport.enums.TAdaptorStatus)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'epochMillis' field.
   * @return The value of the 'epochMillis' field.
   */
  public long getEpochMillis() {
    return epochMillis;
  }


  /**
   * Sets the value of the 'epochMillis' field.
   * @param value the value to set.
   */
  public AdaptorReport setEpochMillis(long value) {
    this.epochMillis = value;
    return this;
  }

  /**
   * Gets the value of the 'adaptorId' field.
   * @return The value of the 'adaptorId' field.
   */
  public java.lang.String getAdaptorId() {
    return adaptorId;
  }


  /**
   * Sets the value of the 'adaptorId' field.
   * @param value the value to set.
   */
  public AdaptorReport setAdaptorId(java.lang.String value) {
    this.adaptorId = value;
    return this;
  }

  /**
   * Gets the value of the 'accountId' field.
   * @return The value of the 'accountId' field.
   */
  public int getAccountId() {
    return accountId;
  }


  /**
   * Sets the value of the 'accountId' field.
   * @param value the value to set.
   */
  public AdaptorReport setAccountId(int value) {
    this.accountId = value;
    return this;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public io.horizon.trader.transport.enums.TAdaptorStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public AdaptorReport setStatus(io.horizon.trader.transport.enums.TAdaptorStatus value) {
    this.status = value;
    return this;
  }

  /**
   * Creates a new AdaptorReport RecordBuilder.
   * @return A new AdaptorReport RecordBuilder
   */
  public static io.horizon.trader.transport.outbound.AdaptorReport.Builder newBuilder() {
    return new io.horizon.trader.transport.outbound.AdaptorReport.Builder();
  }

  /**
   * Creates a new AdaptorReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AdaptorReport RecordBuilder
   */
  public static io.horizon.trader.transport.outbound.AdaptorReport.Builder newBuilder(io.horizon.trader.transport.outbound.AdaptorReport.Builder other) {
    if (other == null) {
      return new io.horizon.trader.transport.outbound.AdaptorReport.Builder();
    } else {
      return new io.horizon.trader.transport.outbound.AdaptorReport.Builder(other);
    }
  }

  /**
   * Creates a new AdaptorReport RecordBuilder by copying an existing AdaptorReport instance.
   * @param other The existing instance to copy.
   * @return A new AdaptorReport RecordBuilder
   */
  public static io.horizon.trader.transport.outbound.AdaptorReport.Builder newBuilder(io.horizon.trader.transport.outbound.AdaptorReport other) {
    if (other == null) {
      return new io.horizon.trader.transport.outbound.AdaptorReport.Builder();
    } else {
      return new io.horizon.trader.transport.outbound.AdaptorReport.Builder(other);
    }
  }

  /**
   * RecordBuilder for AdaptorReport instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AdaptorReport>
    implements org.apache.avro.data.RecordBuilder<AdaptorReport> {

    private long epochMillis;
    private java.lang.String adaptorId;
    private int accountId;
    private io.horizon.trader.transport.enums.TAdaptorStatus status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.horizon.trader.transport.outbound.AdaptorReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.epochMillis)) {
        this.epochMillis = data().deepCopy(fields()[0].schema(), other.epochMillis);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.adaptorId)) {
        this.adaptorId = data().deepCopy(fields()[1].schema(), other.adaptorId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.accountId)) {
        this.accountId = data().deepCopy(fields()[2].schema(), other.accountId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AdaptorReport instance
     * @param other The existing instance to copy.
     */
    private Builder(io.horizon.trader.transport.outbound.AdaptorReport other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.epochMillis)) {
        this.epochMillis = data().deepCopy(fields()[0].schema(), other.epochMillis);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.adaptorId)) {
        this.adaptorId = data().deepCopy(fields()[1].schema(), other.adaptorId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accountId)) {
        this.accountId = data().deepCopy(fields()[2].schema(), other.accountId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'epochMillis' field.
      * @return The value.
      */
    public long getEpochMillis() {
      return epochMillis;
    }


    /**
      * Sets the value of the 'epochMillis' field.
      * @param value The value of 'epochMillis'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.AdaptorReport.Builder setEpochMillis(long value) {
      validate(fields()[0], value);
      this.epochMillis = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'epochMillis' field has been set.
      * @return True if the 'epochMillis' field has been set, false otherwise.
      */
    public boolean hasEpochMillis() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'epochMillis' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.AdaptorReport.Builder clearEpochMillis() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'adaptorId' field.
      * @return The value.
      */
    public java.lang.String getAdaptorId() {
      return adaptorId;
    }


    /**
      * Sets the value of the 'adaptorId' field.
      * @param value The value of 'adaptorId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.AdaptorReport.Builder setAdaptorId(java.lang.String value) {
      validate(fields()[1], value);
      this.adaptorId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'adaptorId' field has been set.
      * @return True if the 'adaptorId' field has been set, false otherwise.
      */
    public boolean hasAdaptorId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'adaptorId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.AdaptorReport.Builder clearAdaptorId() {
      adaptorId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountId' field.
      * @return The value.
      */
    public int getAccountId() {
      return accountId;
    }


    /**
      * Sets the value of the 'accountId' field.
      * @param value The value of 'accountId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.AdaptorReport.Builder setAccountId(int value) {
      validate(fields()[2], value);
      this.accountId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'accountId' field has been set.
      * @return True if the 'accountId' field has been set, false otherwise.
      */
    public boolean hasAccountId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'accountId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.AdaptorReport.Builder clearAccountId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public io.horizon.trader.transport.enums.TAdaptorStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.AdaptorReport.Builder setStatus(io.horizon.trader.transport.enums.TAdaptorStatus value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.AdaptorReport.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AdaptorReport build() {
      try {
        AdaptorReport record = new AdaptorReport();
        record.epochMillis = fieldSetFlags()[0] ? this.epochMillis : (java.lang.Long) defaultValue(fields()[0]);
        record.adaptorId = fieldSetFlags()[1] ? this.adaptorId : (java.lang.String) defaultValue(fields()[1]);
        record.accountId = fieldSetFlags()[2] ? this.accountId : (java.lang.Integer) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (io.horizon.trader.transport.enums.TAdaptorStatus) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AdaptorReport>
    WRITER$ = (org.apache.avro.io.DatumWriter<AdaptorReport>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AdaptorReport>
    READER$ = (org.apache.avro.io.DatumReader<AdaptorReport>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.epochMillis);

    out.writeString(this.adaptorId);

    out.writeInt(this.accountId);

    out.writeEnum(this.status.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.epochMillis = in.readLong();

      this.adaptorId = in.readString();

      this.accountId = in.readInt();

      this.status = io.horizon.trader.transport.enums.TAdaptorStatus.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.epochMillis = in.readLong();
          break;

        case 1:
          this.adaptorId = in.readString();
          break;

        case 2:
          this.accountId = in.readInt();
          break;

        case 3:
          this.status = io.horizon.trader.transport.enums.TAdaptorStatus.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










