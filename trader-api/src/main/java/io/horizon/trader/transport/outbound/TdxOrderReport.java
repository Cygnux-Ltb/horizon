/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.horizon.trader.transport.outbound;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
/** 订单回报 */
@org.apache.avro.specific.AvroGenerated
public class TdxOrderReport extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3860574166584902238L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TdxOrderReport\",\"namespace\":\"io.horizon.trader.transport.outbound\",\"doc\":\"订单回报\",\"fields\":[{\"name\":\"epochMicros\",\"type\":\"long\"},{\"name\":\"ordSysId\",\"type\":\"long\"},{\"name\":\"tradingDay\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"brokerId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"investorId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"orderRef\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"brokerOrdSysId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"exchangeCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"instrumentCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"TdxOrdStatus\",\"namespace\":\"io.horizon.trader.transport.enums\",\"symbols\":[\"INVALID\",\"PENDING_NEW\",\"NEW\",\"NEW_REJECTED\",\"PARTIALLY_FILLED\",\"FILLED\",\"PENDING_CANCEL\",\"CANCELED\",\"CANCEL_REJECTED\",\"PENDING_REPLACE\",\"REPLACED\",\"SUSPENDED\",\"UNPROVIDED\"]}},{\"name\":\"direction\",\"type\":{\"type\":\"enum\",\"name\":\"TdxTrdDirection\",\"namespace\":\"io.horizon.trader.transport.enums\",\"symbols\":[\"INVALID\",\"LONG\",\"SHORT\"]}},{\"name\":\"action\",\"type\":{\"type\":\"enum\",\"name\":\"TdxTrdAction\",\"namespace\":\"io.horizon.trader.transport.enums\",\"symbols\":[\"INVALID\",\"OPEN\",\"CLOSE\",\"CLOSE_TODAY\",\"CLOSE_YESTERDAY\"]}},{\"name\":\"offerQty\",\"type\":\"int\",\"default\":0},{\"name\":\"filledQty\",\"type\":\"int\",\"default\":0},{\"name\":\"offerPrice\",\"type\":\"long\",\"default\":0},{\"name\":\"tradePrice\",\"type\":\"long\",\"default\":0},{\"name\":\"offerTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"updateTime\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"},{\"name\":\"msg\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TdxOrderReport> ENCODER =
      new BinaryMessageEncoder<TdxOrderReport>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TdxOrderReport> DECODER =
      new BinaryMessageDecoder<TdxOrderReport>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TdxOrderReport> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TdxOrderReport> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TdxOrderReport> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TdxOrderReport>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TdxOrderReport to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TdxOrderReport from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TdxOrderReport instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TdxOrderReport fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long epochMicros;
  private long ordSysId;
  private java.lang.String tradingDay;
  private java.lang.String brokerId;
  private java.lang.String investorId;
  private java.lang.String orderRef;
  private java.lang.String brokerOrdSysId;
  private java.lang.String exchangeCode;
  private java.lang.String instrumentCode;
  private io.horizon.trader.transport.enums.TdxOrdStatus status;
  private io.horizon.trader.transport.enums.TdxTrdDirection direction;
  private io.horizon.trader.transport.enums.TdxTrdAction action;
  private int offerQty;
  private int filledQty;
  private long offerPrice;
  private long tradePrice;
  private java.lang.String offerTime;
  private java.lang.String updateTime;
  private java.lang.String msg;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TdxOrderReport() {}

  /**
   * All-args constructor.
   * @param epochMicros The new value for epochMicros
   * @param ordSysId The new value for ordSysId
   * @param tradingDay The new value for tradingDay
   * @param brokerId The new value for brokerId
   * @param investorId The new value for investorId
   * @param orderRef The new value for orderRef
   * @param brokerOrdSysId The new value for brokerOrdSysId
   * @param exchangeCode The new value for exchangeCode
   * @param instrumentCode The new value for instrumentCode
   * @param status The new value for status
   * @param direction The new value for direction
   * @param action The new value for action
   * @param offerQty The new value for offerQty
   * @param filledQty The new value for filledQty
   * @param offerPrice The new value for offerPrice
   * @param tradePrice The new value for tradePrice
   * @param offerTime The new value for offerTime
   * @param updateTime The new value for updateTime
   * @param msg The new value for msg
   */
  public TdxOrderReport(java.lang.Long epochMicros, java.lang.Long ordSysId, java.lang.String tradingDay, java.lang.String brokerId, java.lang.String investorId, java.lang.String orderRef, java.lang.String brokerOrdSysId, java.lang.String exchangeCode, java.lang.String instrumentCode, io.horizon.trader.transport.enums.TdxOrdStatus status, io.horizon.trader.transport.enums.TdxTrdDirection direction, io.horizon.trader.transport.enums.TdxTrdAction action, java.lang.Integer offerQty, java.lang.Integer filledQty, java.lang.Long offerPrice, java.lang.Long tradePrice, java.lang.String offerTime, java.lang.String updateTime, java.lang.String msg) {
    this.epochMicros = epochMicros;
    this.ordSysId = ordSysId;
    this.tradingDay = tradingDay;
    this.brokerId = brokerId;
    this.investorId = investorId;
    this.orderRef = orderRef;
    this.brokerOrdSysId = brokerOrdSysId;
    this.exchangeCode = exchangeCode;
    this.instrumentCode = instrumentCode;
    this.status = status;
    this.direction = direction;
    this.action = action;
    this.offerQty = offerQty;
    this.filledQty = filledQty;
    this.offerPrice = offerPrice;
    this.tradePrice = tradePrice;
    this.offerTime = offerTime;
    this.updateTime = updateTime;
    this.msg = msg;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return epochMicros;
    case 1: return ordSysId;
    case 2: return tradingDay;
    case 3: return brokerId;
    case 4: return investorId;
    case 5: return orderRef;
    case 6: return brokerOrdSysId;
    case 7: return exchangeCode;
    case 8: return instrumentCode;
    case 9: return status;
    case 10: return direction;
    case 11: return action;
    case 12: return offerQty;
    case 13: return filledQty;
    case 14: return offerPrice;
    case 15: return tradePrice;
    case 16: return offerTime;
    case 17: return updateTime;
    case 18: return msg;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: epochMicros = (java.lang.Long)value$; break;
    case 1: ordSysId = (java.lang.Long)value$; break;
    case 2: tradingDay = value$ != null ? value$.toString() : null; break;
    case 3: brokerId = value$ != null ? value$.toString() : null; break;
    case 4: investorId = value$ != null ? value$.toString() : null; break;
    case 5: orderRef = value$ != null ? value$.toString() : null; break;
    case 6: brokerOrdSysId = value$ != null ? value$.toString() : null; break;
    case 7: exchangeCode = value$ != null ? value$.toString() : null; break;
    case 8: instrumentCode = value$ != null ? value$.toString() : null; break;
    case 9: status = (io.horizon.trader.transport.enums.TdxOrdStatus)value$; break;
    case 10: direction = (io.horizon.trader.transport.enums.TdxTrdDirection)value$; break;
    case 11: action = (io.horizon.trader.transport.enums.TdxTrdAction)value$; break;
    case 12: offerQty = (java.lang.Integer)value$; break;
    case 13: filledQty = (java.lang.Integer)value$; break;
    case 14: offerPrice = (java.lang.Long)value$; break;
    case 15: tradePrice = (java.lang.Long)value$; break;
    case 16: offerTime = value$ != null ? value$.toString() : null; break;
    case 17: updateTime = value$ != null ? value$.toString() : null; break;
    case 18: msg = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'epochMicros' field.
   * @return The value of the 'epochMicros' field.
   */
  public long getEpochMicros() {
    return epochMicros;
  }

  /**
   * Gets the value of the 'epochMicros' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalEpochMicros() {
    return Optional.<java.lang.Long>ofNullable(epochMicros);
  }

  /**
   * Sets the value of the 'epochMicros' field.
   * @param value the value to set.
   */
  public TdxOrderReport setEpochMicros(long value) {
    this.epochMicros = value;
    return this;
  }

  /**
   * Gets the value of the 'ordSysId' field.
   * @return The value of the 'ordSysId' field.
   */
  public long getOrdSysId() {
    return ordSysId;
  }

  /**
   * Gets the value of the 'ordSysId' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalOrdSysId() {
    return Optional.<java.lang.Long>ofNullable(ordSysId);
  }

  /**
   * Sets the value of the 'ordSysId' field.
   * @param value the value to set.
   */
  public TdxOrderReport setOrdSysId(long value) {
    this.ordSysId = value;
    return this;
  }

  /**
   * Gets the value of the 'tradingDay' field.
   * @return The value of the 'tradingDay' field.
   */
  public java.lang.String getTradingDay() {
    return tradingDay;
  }

  /**
   * Gets the value of the 'tradingDay' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalTradingDay() {
    return Optional.<java.lang.String>ofNullable(tradingDay);
  }

  /**
   * Sets the value of the 'tradingDay' field.
   * @param value the value to set.
   */
  public TdxOrderReport setTradingDay(java.lang.String value) {
    this.tradingDay = value;
    return this;
  }

  /**
   * Gets the value of the 'brokerId' field.
   * @return The value of the 'brokerId' field.
   */
  public java.lang.String getBrokerId() {
    return brokerId;
  }

  /**
   * Gets the value of the 'brokerId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalBrokerId() {
    return Optional.<java.lang.String>ofNullable(brokerId);
  }

  /**
   * Sets the value of the 'brokerId' field.
   * @param value the value to set.
   */
  public TdxOrderReport setBrokerId(java.lang.String value) {
    this.brokerId = value;
    return this;
  }

  /**
   * Gets the value of the 'investorId' field.
   * @return The value of the 'investorId' field.
   */
  public java.lang.String getInvestorId() {
    return investorId;
  }

  /**
   * Gets the value of the 'investorId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalInvestorId() {
    return Optional.<java.lang.String>ofNullable(investorId);
  }

  /**
   * Sets the value of the 'investorId' field.
   * @param value the value to set.
   */
  public TdxOrderReport setInvestorId(java.lang.String value) {
    this.investorId = value;
    return this;
  }

  /**
   * Gets the value of the 'orderRef' field.
   * @return The value of the 'orderRef' field.
   */
  public java.lang.String getOrderRef() {
    return orderRef;
  }

  /**
   * Gets the value of the 'orderRef' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalOrderRef() {
    return Optional.<java.lang.String>ofNullable(orderRef);
  }

  /**
   * Sets the value of the 'orderRef' field.
   * @param value the value to set.
   */
  public TdxOrderReport setOrderRef(java.lang.String value) {
    this.orderRef = value;
    return this;
  }

  /**
   * Gets the value of the 'brokerOrdSysId' field.
   * @return The value of the 'brokerOrdSysId' field.
   */
  public java.lang.String getBrokerOrdSysId() {
    return brokerOrdSysId;
  }

  /**
   * Gets the value of the 'brokerOrdSysId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalBrokerOrdSysId() {
    return Optional.<java.lang.String>ofNullable(brokerOrdSysId);
  }

  /**
   * Sets the value of the 'brokerOrdSysId' field.
   * @param value the value to set.
   */
  public TdxOrderReport setBrokerOrdSysId(java.lang.String value) {
    this.brokerOrdSysId = value;
    return this;
  }

  /**
   * Gets the value of the 'exchangeCode' field.
   * @return The value of the 'exchangeCode' field.
   */
  public java.lang.String getExchangeCode() {
    return exchangeCode;
  }

  /**
   * Gets the value of the 'exchangeCode' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalExchangeCode() {
    return Optional.<java.lang.String>ofNullable(exchangeCode);
  }

  /**
   * Sets the value of the 'exchangeCode' field.
   * @param value the value to set.
   */
  public TdxOrderReport setExchangeCode(java.lang.String value) {
    this.exchangeCode = value;
    return this;
  }

  /**
   * Gets the value of the 'instrumentCode' field.
   * @return The value of the 'instrumentCode' field.
   */
  public java.lang.String getInstrumentCode() {
    return instrumentCode;
  }

  /**
   * Gets the value of the 'instrumentCode' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalInstrumentCode() {
    return Optional.<java.lang.String>ofNullable(instrumentCode);
  }

  /**
   * Sets the value of the 'instrumentCode' field.
   * @param value the value to set.
   */
  public TdxOrderReport setInstrumentCode(java.lang.String value) {
    this.instrumentCode = value;
    return this;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public io.horizon.trader.transport.enums.TdxOrdStatus getStatus() {
    return status;
  }

  /**
   * Gets the value of the 'status' field as an Optional&lt;io.horizon.trader.transport.enums.TdxOrdStatus&gt;.
   * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxOrdStatus&gt;.
   */
  public Optional<io.horizon.trader.transport.enums.TdxOrdStatus> getOptionalStatus() {
    return Optional.<io.horizon.trader.transport.enums.TdxOrdStatus>ofNullable(status);
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public TdxOrderReport setStatus(io.horizon.trader.transport.enums.TdxOrdStatus value) {
    this.status = value;
    return this;
  }

  /**
   * Gets the value of the 'direction' field.
   * @return The value of the 'direction' field.
   */
  public io.horizon.trader.transport.enums.TdxTrdDirection getDirection() {
    return direction;
  }

  /**
   * Gets the value of the 'direction' field as an Optional&lt;io.horizon.trader.transport.enums.TdxTrdDirection&gt;.
   * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxTrdDirection&gt;.
   */
  public Optional<io.horizon.trader.transport.enums.TdxTrdDirection> getOptionalDirection() {
    return Optional.<io.horizon.trader.transport.enums.TdxTrdDirection>ofNullable(direction);
  }

  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public TdxOrderReport setDirection(io.horizon.trader.transport.enums.TdxTrdDirection value) {
    this.direction = value;
    return this;
  }

  /**
   * Gets the value of the 'action' field.
   * @return The value of the 'action' field.
   */
  public io.horizon.trader.transport.enums.TdxTrdAction getAction() {
    return action;
  }

  /**
   * Gets the value of the 'action' field as an Optional&lt;io.horizon.trader.transport.enums.TdxTrdAction&gt;.
   * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxTrdAction&gt;.
   */
  public Optional<io.horizon.trader.transport.enums.TdxTrdAction> getOptionalAction() {
    return Optional.<io.horizon.trader.transport.enums.TdxTrdAction>ofNullable(action);
  }

  /**
   * Sets the value of the 'action' field.
   * @param value the value to set.
   */
  public TdxOrderReport setAction(io.horizon.trader.transport.enums.TdxTrdAction value) {
    this.action = value;
    return this;
  }

  /**
   * Gets the value of the 'offerQty' field.
   * @return The value of the 'offerQty' field.
   */
  public int getOfferQty() {
    return offerQty;
  }

  /**
   * Gets the value of the 'offerQty' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalOfferQty() {
    return Optional.<java.lang.Integer>ofNullable(offerQty);
  }

  /**
   * Sets the value of the 'offerQty' field.
   * @param value the value to set.
   */
  public TdxOrderReport setOfferQty(int value) {
    this.offerQty = value;
    return this;
  }

  /**
   * Gets the value of the 'filledQty' field.
   * @return The value of the 'filledQty' field.
   */
  public int getFilledQty() {
    return filledQty;
  }

  /**
   * Gets the value of the 'filledQty' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalFilledQty() {
    return Optional.<java.lang.Integer>ofNullable(filledQty);
  }

  /**
   * Sets the value of the 'filledQty' field.
   * @param value the value to set.
   */
  public TdxOrderReport setFilledQty(int value) {
    this.filledQty = value;
    return this;
  }

  /**
   * Gets the value of the 'offerPrice' field.
   * @return The value of the 'offerPrice' field.
   */
  public long getOfferPrice() {
    return offerPrice;
  }

  /**
   * Gets the value of the 'offerPrice' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalOfferPrice() {
    return Optional.<java.lang.Long>ofNullable(offerPrice);
  }

  /**
   * Sets the value of the 'offerPrice' field.
   * @param value the value to set.
   */
  public TdxOrderReport setOfferPrice(long value) {
    this.offerPrice = value;
    return this;
  }

  /**
   * Gets the value of the 'tradePrice' field.
   * @return The value of the 'tradePrice' field.
   */
  public long getTradePrice() {
    return tradePrice;
  }

  /**
   * Gets the value of the 'tradePrice' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalTradePrice() {
    return Optional.<java.lang.Long>ofNullable(tradePrice);
  }

  /**
   * Sets the value of the 'tradePrice' field.
   * @param value the value to set.
   */
  public TdxOrderReport setTradePrice(long value) {
    this.tradePrice = value;
    return this;
  }

  /**
   * Gets the value of the 'offerTime' field.
   * @return The value of the 'offerTime' field.
   */
  public java.lang.String getOfferTime() {
    return offerTime;
  }

  /**
   * Gets the value of the 'offerTime' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalOfferTime() {
    return Optional.<java.lang.String>ofNullable(offerTime);
  }

  /**
   * Sets the value of the 'offerTime' field.
   * @param value the value to set.
   */
  public TdxOrderReport setOfferTime(java.lang.String value) {
    this.offerTime = value;
    return this;
  }

  /**
   * Gets the value of the 'updateTime' field.
   * @return The value of the 'updateTime' field.
   */
  public java.lang.String getUpdateTime() {
    return updateTime;
  }

  /**
   * Gets the value of the 'updateTime' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalUpdateTime() {
    return Optional.<java.lang.String>ofNullable(updateTime);
  }

  /**
   * Sets the value of the 'updateTime' field.
   * @param value the value to set.
   */
  public TdxOrderReport setUpdateTime(java.lang.String value) {
    this.updateTime = value;
    return this;
  }

  /**
   * Gets the value of the 'msg' field.
   * @return The value of the 'msg' field.
   */
  public java.lang.String getMsg() {
    return msg;
  }

  /**
   * Gets the value of the 'msg' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalMsg() {
    return Optional.<java.lang.String>ofNullable(msg);
  }

  /**
   * Sets the value of the 'msg' field.
   * @param value the value to set.
   */
  public TdxOrderReport setMsg(java.lang.String value) {
    this.msg = value;
    return this;
  }

  /**
   * Creates a new TdxOrderReport RecordBuilder.
   * @return A new TdxOrderReport RecordBuilder
   */
  public static io.horizon.trader.transport.outbound.TdxOrderReport.Builder newBuilder() {
    return new io.horizon.trader.transport.outbound.TdxOrderReport.Builder();
  }

  /**
   * Creates a new TdxOrderReport RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TdxOrderReport RecordBuilder
   */
  public static io.horizon.trader.transport.outbound.TdxOrderReport.Builder newBuilder(io.horizon.trader.transport.outbound.TdxOrderReport.Builder other) {
    if (other == null) {
      return new io.horizon.trader.transport.outbound.TdxOrderReport.Builder();
    } else {
      return new io.horizon.trader.transport.outbound.TdxOrderReport.Builder(other);
    }
  }

  /**
   * Creates a new TdxOrderReport RecordBuilder by copying an existing TdxOrderReport instance.
   * @param other The existing instance to copy.
   * @return A new TdxOrderReport RecordBuilder
   */
  public static io.horizon.trader.transport.outbound.TdxOrderReport.Builder newBuilder(io.horizon.trader.transport.outbound.TdxOrderReport other) {
    if (other == null) {
      return new io.horizon.trader.transport.outbound.TdxOrderReport.Builder();
    } else {
      return new io.horizon.trader.transport.outbound.TdxOrderReport.Builder(other);
    }
  }

  /**
   * RecordBuilder for TdxOrderReport instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TdxOrderReport>
    implements org.apache.avro.data.RecordBuilder<TdxOrderReport> {

    private long epochMicros;
    private long ordSysId;
    private java.lang.String tradingDay;
    private java.lang.String brokerId;
    private java.lang.String investorId;
    private java.lang.String orderRef;
    private java.lang.String brokerOrdSysId;
    private java.lang.String exchangeCode;
    private java.lang.String instrumentCode;
    private io.horizon.trader.transport.enums.TdxOrdStatus status;
    private io.horizon.trader.transport.enums.TdxTrdDirection direction;
    private io.horizon.trader.transport.enums.TdxTrdAction action;
    private int offerQty;
    private int filledQty;
    private long offerPrice;
    private long tradePrice;
    private java.lang.String offerTime;
    private java.lang.String updateTime;
    private java.lang.String msg;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.horizon.trader.transport.outbound.TdxOrderReport.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.epochMicros)) {
        this.epochMicros = data().deepCopy(fields()[0].schema(), other.epochMicros);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.ordSysId)) {
        this.ordSysId = data().deepCopy(fields()[1].schema(), other.ordSysId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.tradingDay)) {
        this.tradingDay = data().deepCopy(fields()[2].schema(), other.tradingDay);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[3].schema(), other.brokerId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.investorId)) {
        this.investorId = data().deepCopy(fields()[4].schema(), other.investorId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.orderRef)) {
        this.orderRef = data().deepCopy(fields()[5].schema(), other.orderRef);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.brokerOrdSysId)) {
        this.brokerOrdSysId = data().deepCopy(fields()[6].schema(), other.brokerOrdSysId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.exchangeCode)) {
        this.exchangeCode = data().deepCopy(fields()[7].schema(), other.exchangeCode);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[8].schema(), other.instrumentCode);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.status)) {
        this.status = data().deepCopy(fields()[9].schema(), other.status);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.direction)) {
        this.direction = data().deepCopy(fields()[10].schema(), other.direction);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.action)) {
        this.action = data().deepCopy(fields()[11].schema(), other.action);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.offerQty)) {
        this.offerQty = data().deepCopy(fields()[12].schema(), other.offerQty);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.filledQty)) {
        this.filledQty = data().deepCopy(fields()[13].schema(), other.filledQty);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.offerPrice)) {
        this.offerPrice = data().deepCopy(fields()[14].schema(), other.offerPrice);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.tradePrice)) {
        this.tradePrice = data().deepCopy(fields()[15].schema(), other.tradePrice);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.offerTime)) {
        this.offerTime = data().deepCopy(fields()[16].schema(), other.offerTime);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[17].schema(), other.updateTime);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.msg)) {
        this.msg = data().deepCopy(fields()[18].schema(), other.msg);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
    }

    /**
     * Creates a Builder by copying an existing TdxOrderReport instance
     * @param other The existing instance to copy.
     */
    private Builder(io.horizon.trader.transport.outbound.TdxOrderReport other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.epochMicros)) {
        this.epochMicros = data().deepCopy(fields()[0].schema(), other.epochMicros);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ordSysId)) {
        this.ordSysId = data().deepCopy(fields()[1].schema(), other.ordSysId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tradingDay)) {
        this.tradingDay = data().deepCopy(fields()[2].schema(), other.tradingDay);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.brokerId)) {
        this.brokerId = data().deepCopy(fields()[3].schema(), other.brokerId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.investorId)) {
        this.investorId = data().deepCopy(fields()[4].schema(), other.investorId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.orderRef)) {
        this.orderRef = data().deepCopy(fields()[5].schema(), other.orderRef);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.brokerOrdSysId)) {
        this.brokerOrdSysId = data().deepCopy(fields()[6].schema(), other.brokerOrdSysId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.exchangeCode)) {
        this.exchangeCode = data().deepCopy(fields()[7].schema(), other.exchangeCode);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[8].schema(), other.instrumentCode);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.status)) {
        this.status = data().deepCopy(fields()[9].schema(), other.status);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.direction)) {
        this.direction = data().deepCopy(fields()[10].schema(), other.direction);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.action)) {
        this.action = data().deepCopy(fields()[11].schema(), other.action);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.offerQty)) {
        this.offerQty = data().deepCopy(fields()[12].schema(), other.offerQty);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.filledQty)) {
        this.filledQty = data().deepCopy(fields()[13].schema(), other.filledQty);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.offerPrice)) {
        this.offerPrice = data().deepCopy(fields()[14].schema(), other.offerPrice);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.tradePrice)) {
        this.tradePrice = data().deepCopy(fields()[15].schema(), other.tradePrice);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.offerTime)) {
        this.offerTime = data().deepCopy(fields()[16].schema(), other.offerTime);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.updateTime)) {
        this.updateTime = data().deepCopy(fields()[17].schema(), other.updateTime);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.msg)) {
        this.msg = data().deepCopy(fields()[18].schema(), other.msg);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'epochMicros' field.
      * @return The value.
      */
    public long getEpochMicros() {
      return epochMicros;
    }

    /**
      * Gets the value of the 'epochMicros' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalEpochMicros() {
      return Optional.<java.lang.Long>ofNullable(epochMicros);
    }

    /**
      * Sets the value of the 'epochMicros' field.
      * @param value The value of 'epochMicros'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setEpochMicros(long value) {
      validate(fields()[0], value);
      this.epochMicros = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'epochMicros' field has been set.
      * @return True if the 'epochMicros' field has been set, false otherwise.
      */
    public boolean hasEpochMicros() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'epochMicros' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearEpochMicros() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ordSysId' field.
      * @return The value.
      */
    public long getOrdSysId() {
      return ordSysId;
    }

    /**
      * Gets the value of the 'ordSysId' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalOrdSysId() {
      return Optional.<java.lang.Long>ofNullable(ordSysId);
    }

    /**
      * Sets the value of the 'ordSysId' field.
      * @param value The value of 'ordSysId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setOrdSysId(long value) {
      validate(fields()[1], value);
      this.ordSysId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ordSysId' field has been set.
      * @return True if the 'ordSysId' field has been set, false otherwise.
      */
    public boolean hasOrdSysId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ordSysId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearOrdSysId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradingDay' field.
      * @return The value.
      */
    public java.lang.String getTradingDay() {
      return tradingDay;
    }

    /**
      * Gets the value of the 'tradingDay' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalTradingDay() {
      return Optional.<java.lang.String>ofNullable(tradingDay);
    }

    /**
      * Sets the value of the 'tradingDay' field.
      * @param value The value of 'tradingDay'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setTradingDay(java.lang.String value) {
      validate(fields()[2], value);
      this.tradingDay = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'tradingDay' field has been set.
      * @return True if the 'tradingDay' field has been set, false otherwise.
      */
    public boolean hasTradingDay() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tradingDay' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearTradingDay() {
      tradingDay = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerId' field.
      * @return The value.
      */
    public java.lang.String getBrokerId() {
      return brokerId;
    }

    /**
      * Gets the value of the 'brokerId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalBrokerId() {
      return Optional.<java.lang.String>ofNullable(brokerId);
    }

    /**
      * Sets the value of the 'brokerId' field.
      * @param value The value of 'brokerId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setBrokerId(java.lang.String value) {
      validate(fields()[3], value);
      this.brokerId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerId' field has been set.
      * @return True if the 'brokerId' field has been set, false otherwise.
      */
    public boolean hasBrokerId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'brokerId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearBrokerId() {
      brokerId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'investorId' field.
      * @return The value.
      */
    public java.lang.String getInvestorId() {
      return investorId;
    }

    /**
      * Gets the value of the 'investorId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalInvestorId() {
      return Optional.<java.lang.String>ofNullable(investorId);
    }

    /**
      * Sets the value of the 'investorId' field.
      * @param value The value of 'investorId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setInvestorId(java.lang.String value) {
      validate(fields()[4], value);
      this.investorId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'investorId' field has been set.
      * @return True if the 'investorId' field has been set, false otherwise.
      */
    public boolean hasInvestorId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'investorId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearInvestorId() {
      investorId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderRef' field.
      * @return The value.
      */
    public java.lang.String getOrderRef() {
      return orderRef;
    }

    /**
      * Gets the value of the 'orderRef' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalOrderRef() {
      return Optional.<java.lang.String>ofNullable(orderRef);
    }

    /**
      * Sets the value of the 'orderRef' field.
      * @param value The value of 'orderRef'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setOrderRef(java.lang.String value) {
      validate(fields()[5], value);
      this.orderRef = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'orderRef' field has been set.
      * @return True if the 'orderRef' field has been set, false otherwise.
      */
    public boolean hasOrderRef() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'orderRef' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearOrderRef() {
      orderRef = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'brokerOrdSysId' field.
      * @return The value.
      */
    public java.lang.String getBrokerOrdSysId() {
      return brokerOrdSysId;
    }

    /**
      * Gets the value of the 'brokerOrdSysId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalBrokerOrdSysId() {
      return Optional.<java.lang.String>ofNullable(brokerOrdSysId);
    }

    /**
      * Sets the value of the 'brokerOrdSysId' field.
      * @param value The value of 'brokerOrdSysId'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setBrokerOrdSysId(java.lang.String value) {
      validate(fields()[6], value);
      this.brokerOrdSysId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'brokerOrdSysId' field has been set.
      * @return True if the 'brokerOrdSysId' field has been set, false otherwise.
      */
    public boolean hasBrokerOrdSysId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'brokerOrdSysId' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearBrokerOrdSysId() {
      brokerOrdSysId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'exchangeCode' field.
      * @return The value.
      */
    public java.lang.String getExchangeCode() {
      return exchangeCode;
    }

    /**
      * Gets the value of the 'exchangeCode' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalExchangeCode() {
      return Optional.<java.lang.String>ofNullable(exchangeCode);
    }

    /**
      * Sets the value of the 'exchangeCode' field.
      * @param value The value of 'exchangeCode'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setExchangeCode(java.lang.String value) {
      validate(fields()[7], value);
      this.exchangeCode = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'exchangeCode' field has been set.
      * @return True if the 'exchangeCode' field has been set, false otherwise.
      */
    public boolean hasExchangeCode() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'exchangeCode' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearExchangeCode() {
      exchangeCode = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentCode' field.
      * @return The value.
      */
    public java.lang.String getInstrumentCode() {
      return instrumentCode;
    }

    /**
      * Gets the value of the 'instrumentCode' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalInstrumentCode() {
      return Optional.<java.lang.String>ofNullable(instrumentCode);
    }

    /**
      * Sets the value of the 'instrumentCode' field.
      * @param value The value of 'instrumentCode'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setInstrumentCode(java.lang.String value) {
      validate(fields()[8], value);
      this.instrumentCode = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentCode' field has been set.
      * @return True if the 'instrumentCode' field has been set, false otherwise.
      */
    public boolean hasInstrumentCode() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'instrumentCode' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearInstrumentCode() {
      instrumentCode = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public io.horizon.trader.transport.enums.TdxOrdStatus getStatus() {
      return status;
    }

    /**
      * Gets the value of the 'status' field as an Optional&lt;io.horizon.trader.transport.enums.TdxOrdStatus&gt;.
      * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxOrdStatus&gt;.
      */
    public Optional<io.horizon.trader.transport.enums.TdxOrdStatus> getOptionalStatus() {
      return Optional.<io.horizon.trader.transport.enums.TdxOrdStatus>ofNullable(status);
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setStatus(io.horizon.trader.transport.enums.TdxOrdStatus value) {
      validate(fields()[9], value);
      this.status = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearStatus() {
      status = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'direction' field.
      * @return The value.
      */
    public io.horizon.trader.transport.enums.TdxTrdDirection getDirection() {
      return direction;
    }

    /**
      * Gets the value of the 'direction' field as an Optional&lt;io.horizon.trader.transport.enums.TdxTrdDirection&gt;.
      * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxTrdDirection&gt;.
      */
    public Optional<io.horizon.trader.transport.enums.TdxTrdDirection> getOptionalDirection() {
      return Optional.<io.horizon.trader.transport.enums.TdxTrdDirection>ofNullable(direction);
    }

    /**
      * Sets the value of the 'direction' field.
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setDirection(io.horizon.trader.transport.enums.TdxTrdDirection value) {
      validate(fields()[10], value);
      this.direction = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'direction' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearDirection() {
      direction = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'action' field.
      * @return The value.
      */
    public io.horizon.trader.transport.enums.TdxTrdAction getAction() {
      return action;
    }

    /**
      * Gets the value of the 'action' field as an Optional&lt;io.horizon.trader.transport.enums.TdxTrdAction&gt;.
      * @return The value wrapped in an Optional&lt;io.horizon.trader.transport.enums.TdxTrdAction&gt;.
      */
    public Optional<io.horizon.trader.transport.enums.TdxTrdAction> getOptionalAction() {
      return Optional.<io.horizon.trader.transport.enums.TdxTrdAction>ofNullable(action);
    }

    /**
      * Sets the value of the 'action' field.
      * @param value The value of 'action'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setAction(io.horizon.trader.transport.enums.TdxTrdAction value) {
      validate(fields()[11], value);
      this.action = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'action' field has been set.
      * @return True if the 'action' field has been set, false otherwise.
      */
    public boolean hasAction() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'action' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearAction() {
      action = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerQty' field.
      * @return The value.
      */
    public int getOfferQty() {
      return offerQty;
    }

    /**
      * Gets the value of the 'offerQty' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalOfferQty() {
      return Optional.<java.lang.Integer>ofNullable(offerQty);
    }

    /**
      * Sets the value of the 'offerQty' field.
      * @param value The value of 'offerQty'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setOfferQty(int value) {
      validate(fields()[12], value);
      this.offerQty = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'offerQty' field has been set.
      * @return True if the 'offerQty' field has been set, false otherwise.
      */
    public boolean hasOfferQty() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'offerQty' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearOfferQty() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'filledQty' field.
      * @return The value.
      */
    public int getFilledQty() {
      return filledQty;
    }

    /**
      * Gets the value of the 'filledQty' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalFilledQty() {
      return Optional.<java.lang.Integer>ofNullable(filledQty);
    }

    /**
      * Sets the value of the 'filledQty' field.
      * @param value The value of 'filledQty'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setFilledQty(int value) {
      validate(fields()[13], value);
      this.filledQty = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'filledQty' field has been set.
      * @return True if the 'filledQty' field has been set, false otherwise.
      */
    public boolean hasFilledQty() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'filledQty' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearFilledQty() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerPrice' field.
      * @return The value.
      */
    public long getOfferPrice() {
      return offerPrice;
    }

    /**
      * Gets the value of the 'offerPrice' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalOfferPrice() {
      return Optional.<java.lang.Long>ofNullable(offerPrice);
    }

    /**
      * Sets the value of the 'offerPrice' field.
      * @param value The value of 'offerPrice'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setOfferPrice(long value) {
      validate(fields()[14], value);
      this.offerPrice = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'offerPrice' field has been set.
      * @return True if the 'offerPrice' field has been set, false otherwise.
      */
    public boolean hasOfferPrice() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'offerPrice' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearOfferPrice() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradePrice' field.
      * @return The value.
      */
    public long getTradePrice() {
      return tradePrice;
    }

    /**
      * Gets the value of the 'tradePrice' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalTradePrice() {
      return Optional.<java.lang.Long>ofNullable(tradePrice);
    }

    /**
      * Sets the value of the 'tradePrice' field.
      * @param value The value of 'tradePrice'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setTradePrice(long value) {
      validate(fields()[15], value);
      this.tradePrice = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'tradePrice' field has been set.
      * @return True if the 'tradePrice' field has been set, false otherwise.
      */
    public boolean hasTradePrice() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'tradePrice' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearTradePrice() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'offerTime' field.
      * @return The value.
      */
    public java.lang.String getOfferTime() {
      return offerTime;
    }

    /**
      * Gets the value of the 'offerTime' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalOfferTime() {
      return Optional.<java.lang.String>ofNullable(offerTime);
    }

    /**
      * Sets the value of the 'offerTime' field.
      * @param value The value of 'offerTime'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setOfferTime(java.lang.String value) {
      validate(fields()[16], value);
      this.offerTime = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'offerTime' field has been set.
      * @return True if the 'offerTime' field has been set, false otherwise.
      */
    public boolean hasOfferTime() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'offerTime' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearOfferTime() {
      offerTime = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'updateTime' field.
      * @return The value.
      */
    public java.lang.String getUpdateTime() {
      return updateTime;
    }

    /**
      * Gets the value of the 'updateTime' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalUpdateTime() {
      return Optional.<java.lang.String>ofNullable(updateTime);
    }

    /**
      * Sets the value of the 'updateTime' field.
      * @param value The value of 'updateTime'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setUpdateTime(java.lang.String value) {
      validate(fields()[17], value);
      this.updateTime = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'updateTime' field has been set.
      * @return True if the 'updateTime' field has been set, false otherwise.
      */
    public boolean hasUpdateTime() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'updateTime' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearUpdateTime() {
      updateTime = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'msg' field.
      * @return The value.
      */
    public java.lang.String getMsg() {
      return msg;
    }

    /**
      * Gets the value of the 'msg' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalMsg() {
      return Optional.<java.lang.String>ofNullable(msg);
    }

    /**
      * Sets the value of the 'msg' field.
      * @param value The value of 'msg'.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder setMsg(java.lang.String value) {
      validate(fields()[18], value);
      this.msg = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'msg' field has been set.
      * @return True if the 'msg' field has been set, false otherwise.
      */
    public boolean hasMsg() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'msg' field.
      * @return This builder.
      */
    public io.horizon.trader.transport.outbound.TdxOrderReport.Builder clearMsg() {
      msg = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    public TdxOrderReport build() {
      try {
        TdxOrderReport record = new TdxOrderReport();
        record.epochMicros = fieldSetFlags()[0] ? this.epochMicros : (java.lang.Long) defaultValue(fields()[0]);
        record.ordSysId = fieldSetFlags()[1] ? this.ordSysId : (java.lang.Long) defaultValue(fields()[1]);
        record.tradingDay = fieldSetFlags()[2] ? this.tradingDay : (java.lang.String) defaultValue(fields()[2]);
        record.brokerId = fieldSetFlags()[3] ? this.brokerId : (java.lang.String) defaultValue(fields()[3]);
        record.investorId = fieldSetFlags()[4] ? this.investorId : (java.lang.String) defaultValue(fields()[4]);
        record.orderRef = fieldSetFlags()[5] ? this.orderRef : (java.lang.String) defaultValue(fields()[5]);
        record.brokerOrdSysId = fieldSetFlags()[6] ? this.brokerOrdSysId : (java.lang.String) defaultValue(fields()[6]);
        record.exchangeCode = fieldSetFlags()[7] ? this.exchangeCode : (java.lang.String) defaultValue(fields()[7]);
        record.instrumentCode = fieldSetFlags()[8] ? this.instrumentCode : (java.lang.String) defaultValue(fields()[8]);
        record.status = fieldSetFlags()[9] ? this.status : (io.horizon.trader.transport.enums.TdxOrdStatus) defaultValue(fields()[9]);
        record.direction = fieldSetFlags()[10] ? this.direction : (io.horizon.trader.transport.enums.TdxTrdDirection) defaultValue(fields()[10]);
        record.action = fieldSetFlags()[11] ? this.action : (io.horizon.trader.transport.enums.TdxTrdAction) defaultValue(fields()[11]);
        record.offerQty = fieldSetFlags()[12] ? this.offerQty : (java.lang.Integer) defaultValue(fields()[12]);
        record.filledQty = fieldSetFlags()[13] ? this.filledQty : (java.lang.Integer) defaultValue(fields()[13]);
        record.offerPrice = fieldSetFlags()[14] ? this.offerPrice : (java.lang.Long) defaultValue(fields()[14]);
        record.tradePrice = fieldSetFlags()[15] ? this.tradePrice : (java.lang.Long) defaultValue(fields()[15]);
        record.offerTime = fieldSetFlags()[16] ? this.offerTime : (java.lang.String) defaultValue(fields()[16]);
        record.updateTime = fieldSetFlags()[17] ? this.updateTime : (java.lang.String) defaultValue(fields()[17]);
        record.msg = fieldSetFlags()[18] ? this.msg : (java.lang.String) defaultValue(fields()[18]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TdxOrderReport>
    WRITER$ = (org.apache.avro.io.DatumWriter<TdxOrderReport>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TdxOrderReport>
    READER$ = (org.apache.avro.io.DatumReader<TdxOrderReport>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.epochMicros);

    out.writeLong(this.ordSysId);

    out.writeString(this.tradingDay);

    out.writeString(this.brokerId);

    out.writeString(this.investorId);

    out.writeString(this.orderRef);

    out.writeString(this.brokerOrdSysId);

    out.writeString(this.exchangeCode);

    out.writeString(this.instrumentCode);

    out.writeEnum(this.status.ordinal());

    out.writeEnum(this.direction.ordinal());

    out.writeEnum(this.action.ordinal());

    out.writeInt(this.offerQty);

    out.writeInt(this.filledQty);

    out.writeLong(this.offerPrice);

    out.writeLong(this.tradePrice);

    out.writeString(this.offerTime);

    out.writeString(this.updateTime);

    out.writeString(this.msg);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.epochMicros = in.readLong();

      this.ordSysId = in.readLong();

      this.tradingDay = in.readString();

      this.brokerId = in.readString();

      this.investorId = in.readString();

      this.orderRef = in.readString();

      this.brokerOrdSysId = in.readString();

      this.exchangeCode = in.readString();

      this.instrumentCode = in.readString();

      this.status = io.horizon.trader.transport.enums.TdxOrdStatus.values()[in.readEnum()];

      this.direction = io.horizon.trader.transport.enums.TdxTrdDirection.values()[in.readEnum()];

      this.action = io.horizon.trader.transport.enums.TdxTrdAction.values()[in.readEnum()];

      this.offerQty = in.readInt();

      this.filledQty = in.readInt();

      this.offerPrice = in.readLong();

      this.tradePrice = in.readLong();

      this.offerTime = in.readString();

      this.updateTime = in.readString();

      this.msg = in.readString();

    } else {
      for (int i = 0; i < 19; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.epochMicros = in.readLong();
          break;

        case 1:
          this.ordSysId = in.readLong();
          break;

        case 2:
          this.tradingDay = in.readString();
          break;

        case 3:
          this.brokerId = in.readString();
          break;

        case 4:
          this.investorId = in.readString();
          break;

        case 5:
          this.orderRef = in.readString();
          break;

        case 6:
          this.brokerOrdSysId = in.readString();
          break;

        case 7:
          this.exchangeCode = in.readString();
          break;

        case 8:
          this.instrumentCode = in.readString();
          break;

        case 9:
          this.status = io.horizon.trader.transport.enums.TdxOrdStatus.values()[in.readEnum()];
          break;

        case 10:
          this.direction = io.horizon.trader.transport.enums.TdxTrdDirection.values()[in.readEnum()];
          break;

        case 11:
          this.action = io.horizon.trader.transport.enums.TdxTrdAction.values()[in.readEnum()];
          break;

        case 12:
          this.offerQty = in.readInt();
          break;

        case 13:
          this.filledQty = in.readInt();
          break;

        case 14:
          this.offerPrice = in.readLong();
          break;

        case 15:
          this.tradePrice = in.readLong();
          break;

        case 16:
          this.offerTime = in.readString();
          break;

        case 17:
          this.updateTime = in.readString();
          break;

        case 18:
          this.msg = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










