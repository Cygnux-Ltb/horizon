/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.horizon.market.transport.outbound;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
/** 五档快速行情数据结构 */
@org.apache.avro.specific.AvroGenerated
public class FastMarketData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2953834063192783918L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FastMarketData\",\"namespace\":\"io.horizon.market.transport.outbound\",\"doc\":\"五档快速行情数据结构\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"instrumentId\",\"type\":\"int\"},{\"name\":\"instrumentCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastPrice\",\"type\":\"double\"},{\"name\":\"volume\",\"type\":\"int\"},{\"name\":\"turnover\",\"type\":\"long\"},{\"name\":\"bidPrices1\",\"type\":\"double\"},{\"name\":\"bidPrices2\",\"type\":\"double\"},{\"name\":\"bidPrices3\",\"type\":\"double\"},{\"name\":\"bidPrices4\",\"type\":\"double\"},{\"name\":\"bidPrices5\",\"type\":\"double\"},{\"name\":\"bidVolumes1\",\"type\":\"int\"},{\"name\":\"bidVolumes2\",\"type\":\"int\"},{\"name\":\"bidVolumes3\",\"type\":\"int\"},{\"name\":\"bidVolumes4\",\"type\":\"int\"},{\"name\":\"bidVolumes5\",\"type\":\"int\"},{\"name\":\"askPrices1\",\"type\":\"double\"},{\"name\":\"askPrices2\",\"type\":\"double\"},{\"name\":\"askPrices3\",\"type\":\"double\"},{\"name\":\"askPrices4\",\"type\":\"double\"},{\"name\":\"askPrices5\",\"type\":\"double\"},{\"name\":\"askVolumes1\",\"type\":\"int\"},{\"name\":\"askVolumes2\",\"type\":\"int\"},{\"name\":\"askVolumes3\",\"type\":\"int\"},{\"name\":\"askVolumes4\",\"type\":\"int\"},{\"name\":\"askVolumes5\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FastMarketData> ENCODER =
      new BinaryMessageEncoder<FastMarketData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FastMarketData> DECODER =
      new BinaryMessageDecoder<FastMarketData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FastMarketData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FastMarketData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FastMarketData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FastMarketData>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FastMarketData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FastMarketData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FastMarketData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FastMarketData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long timestamp;
  private int instrumentId;
  private java.lang.String instrumentCode;
  private double lastPrice;
  private int volume;
  private long turnover;
  private double bidPrices1;
  private double bidPrices2;
  private double bidPrices3;
  private double bidPrices4;
  private double bidPrices5;
  private int bidVolumes1;
  private int bidVolumes2;
  private int bidVolumes3;
  private int bidVolumes4;
  private int bidVolumes5;
  private double askPrices1;
  private double askPrices2;
  private double askPrices3;
  private double askPrices4;
  private double askPrices5;
  private int askVolumes1;
  private int askVolumes2;
  private int askVolumes3;
  private int askVolumes4;
  private int askVolumes5;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FastMarketData() {}

  /**
   * All-args constructor.
   * @param timestamp The new value for timestamp
   * @param instrumentId The new value for instrumentId
   * @param instrumentCode The new value for instrumentCode
   * @param lastPrice The new value for lastPrice
   * @param volume The new value for volume
   * @param turnover The new value for turnover
   * @param bidPrices1 The new value for bidPrices1
   * @param bidPrices2 The new value for bidPrices2
   * @param bidPrices3 The new value for bidPrices3
   * @param bidPrices4 The new value for bidPrices4
   * @param bidPrices5 The new value for bidPrices5
   * @param bidVolumes1 The new value for bidVolumes1
   * @param bidVolumes2 The new value for bidVolumes2
   * @param bidVolumes3 The new value for bidVolumes3
   * @param bidVolumes4 The new value for bidVolumes4
   * @param bidVolumes5 The new value for bidVolumes5
   * @param askPrices1 The new value for askPrices1
   * @param askPrices2 The new value for askPrices2
   * @param askPrices3 The new value for askPrices3
   * @param askPrices4 The new value for askPrices4
   * @param askPrices5 The new value for askPrices5
   * @param askVolumes1 The new value for askVolumes1
   * @param askVolumes2 The new value for askVolumes2
   * @param askVolumes3 The new value for askVolumes3
   * @param askVolumes4 The new value for askVolumes4
   * @param askVolumes5 The new value for askVolumes5
   */
  public FastMarketData(java.lang.Long timestamp, java.lang.Integer instrumentId, java.lang.String instrumentCode, java.lang.Double lastPrice, java.lang.Integer volume, java.lang.Long turnover, java.lang.Double bidPrices1, java.lang.Double bidPrices2, java.lang.Double bidPrices3, java.lang.Double bidPrices4, java.lang.Double bidPrices5, java.lang.Integer bidVolumes1, java.lang.Integer bidVolumes2, java.lang.Integer bidVolumes3, java.lang.Integer bidVolumes4, java.lang.Integer bidVolumes5, java.lang.Double askPrices1, java.lang.Double askPrices2, java.lang.Double askPrices3, java.lang.Double askPrices4, java.lang.Double askPrices5, java.lang.Integer askVolumes1, java.lang.Integer askVolumes2, java.lang.Integer askVolumes3, java.lang.Integer askVolumes4, java.lang.Integer askVolumes5) {
    this.timestamp = timestamp;
    this.instrumentId = instrumentId;
    this.instrumentCode = instrumentCode;
    this.lastPrice = lastPrice;
    this.volume = volume;
    this.turnover = turnover;
    this.bidPrices1 = bidPrices1;
    this.bidPrices2 = bidPrices2;
    this.bidPrices3 = bidPrices3;
    this.bidPrices4 = bidPrices4;
    this.bidPrices5 = bidPrices5;
    this.bidVolumes1 = bidVolumes1;
    this.bidVolumes2 = bidVolumes2;
    this.bidVolumes3 = bidVolumes3;
    this.bidVolumes4 = bidVolumes4;
    this.bidVolumes5 = bidVolumes5;
    this.askPrices1 = askPrices1;
    this.askPrices2 = askPrices2;
    this.askPrices3 = askPrices3;
    this.askPrices4 = askPrices4;
    this.askPrices5 = askPrices5;
    this.askVolumes1 = askVolumes1;
    this.askVolumes2 = askVolumes2;
    this.askVolumes3 = askVolumes3;
    this.askVolumes4 = askVolumes4;
    this.askVolumes5 = askVolumes5;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return instrumentId;
    case 2: return instrumentCode;
    case 3: return lastPrice;
    case 4: return volume;
    case 5: return turnover;
    case 6: return bidPrices1;
    case 7: return bidPrices2;
    case 8: return bidPrices3;
    case 9: return bidPrices4;
    case 10: return bidPrices5;
    case 11: return bidVolumes1;
    case 12: return bidVolumes2;
    case 13: return bidVolumes3;
    case 14: return bidVolumes4;
    case 15: return bidVolumes5;
    case 16: return askPrices1;
    case 17: return askPrices2;
    case 18: return askPrices3;
    case 19: return askPrices4;
    case 20: return askPrices5;
    case 21: return askVolumes1;
    case 22: return askVolumes2;
    case 23: return askVolumes3;
    case 24: return askVolumes4;
    case 25: return askVolumes5;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.Long)value$; break;
    case 1: instrumentId = (java.lang.Integer)value$; break;
    case 2: instrumentCode = value$ != null ? value$.toString() : null; break;
    case 3: lastPrice = (java.lang.Double)value$; break;
    case 4: volume = (java.lang.Integer)value$; break;
    case 5: turnover = (java.lang.Long)value$; break;
    case 6: bidPrices1 = (java.lang.Double)value$; break;
    case 7: bidPrices2 = (java.lang.Double)value$; break;
    case 8: bidPrices3 = (java.lang.Double)value$; break;
    case 9: bidPrices4 = (java.lang.Double)value$; break;
    case 10: bidPrices5 = (java.lang.Double)value$; break;
    case 11: bidVolumes1 = (java.lang.Integer)value$; break;
    case 12: bidVolumes2 = (java.lang.Integer)value$; break;
    case 13: bidVolumes3 = (java.lang.Integer)value$; break;
    case 14: bidVolumes4 = (java.lang.Integer)value$; break;
    case 15: bidVolumes5 = (java.lang.Integer)value$; break;
    case 16: askPrices1 = (java.lang.Double)value$; break;
    case 17: askPrices2 = (java.lang.Double)value$; break;
    case 18: askPrices3 = (java.lang.Double)value$; break;
    case 19: askPrices4 = (java.lang.Double)value$; break;
    case 20: askPrices5 = (java.lang.Double)value$; break;
    case 21: askVolumes1 = (java.lang.Integer)value$; break;
    case 22: askVolumes2 = (java.lang.Integer)value$; break;
    case 23: askVolumes3 = (java.lang.Integer)value$; break;
    case 24: askVolumes4 = (java.lang.Integer)value$; break;
    case 25: askVolumes5 = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }

  /**
   * Gets the value of the 'timestamp' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalTimestamp() {
    return Optional.<java.lang.Long>ofNullable(timestamp);
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public FastMarketData setTimestamp(long value) {
    this.timestamp = value;
    return this;
  }

  /**
   * Gets the value of the 'instrumentId' field.
   * @return The value of the 'instrumentId' field.
   */
  public int getInstrumentId() {
    return instrumentId;
  }

  /**
   * Gets the value of the 'instrumentId' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalInstrumentId() {
    return Optional.<java.lang.Integer>ofNullable(instrumentId);
  }

  /**
   * Sets the value of the 'instrumentId' field.
   * @param value the value to set.
   */
  public FastMarketData setInstrumentId(int value) {
    this.instrumentId = value;
    return this;
  }

  /**
   * Gets the value of the 'instrumentCode' field.
   * @return The value of the 'instrumentCode' field.
   */
  public java.lang.String getInstrumentCode() {
    return instrumentCode;
  }

  /**
   * Gets the value of the 'instrumentCode' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalInstrumentCode() {
    return Optional.<java.lang.String>ofNullable(instrumentCode);
  }

  /**
   * Sets the value of the 'instrumentCode' field.
   * @param value the value to set.
   */
  public FastMarketData setInstrumentCode(java.lang.String value) {
    this.instrumentCode = value;
    return this;
  }

  /**
   * Gets the value of the 'lastPrice' field.
   * @return The value of the 'lastPrice' field.
   */
  public double getLastPrice() {
    return lastPrice;
  }

  /**
   * Gets the value of the 'lastPrice' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalLastPrice() {
    return Optional.<java.lang.Double>ofNullable(lastPrice);
  }

  /**
   * Sets the value of the 'lastPrice' field.
   * @param value the value to set.
   */
  public FastMarketData setLastPrice(double value) {
    this.lastPrice = value;
    return this;
  }

  /**
   * Gets the value of the 'volume' field.
   * @return The value of the 'volume' field.
   */
  public int getVolume() {
    return volume;
  }

  /**
   * Gets the value of the 'volume' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalVolume() {
    return Optional.<java.lang.Integer>ofNullable(volume);
  }

  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public FastMarketData setVolume(int value) {
    this.volume = value;
    return this;
  }

  /**
   * Gets the value of the 'turnover' field.
   * @return The value of the 'turnover' field.
   */
  public long getTurnover() {
    return turnover;
  }

  /**
   * Gets the value of the 'turnover' field as an Optional&lt;java.lang.Long&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
   */
  public Optional<java.lang.Long> getOptionalTurnover() {
    return Optional.<java.lang.Long>ofNullable(turnover);
  }

  /**
   * Sets the value of the 'turnover' field.
   * @param value the value to set.
   */
  public FastMarketData setTurnover(long value) {
    this.turnover = value;
    return this;
  }

  /**
   * Gets the value of the 'bidPrices1' field.
   * @return The value of the 'bidPrices1' field.
   */
  public double getBidPrices1() {
    return bidPrices1;
  }

  /**
   * Gets the value of the 'bidPrices1' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalBidPrices1() {
    return Optional.<java.lang.Double>ofNullable(bidPrices1);
  }

  /**
   * Sets the value of the 'bidPrices1' field.
   * @param value the value to set.
   */
  public FastMarketData setBidPrices1(double value) {
    this.bidPrices1 = value;
    return this;
  }

  /**
   * Gets the value of the 'bidPrices2' field.
   * @return The value of the 'bidPrices2' field.
   */
  public double getBidPrices2() {
    return bidPrices2;
  }

  /**
   * Gets the value of the 'bidPrices2' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalBidPrices2() {
    return Optional.<java.lang.Double>ofNullable(bidPrices2);
  }

  /**
   * Sets the value of the 'bidPrices2' field.
   * @param value the value to set.
   */
  public FastMarketData setBidPrices2(double value) {
    this.bidPrices2 = value;
    return this;
  }

  /**
   * Gets the value of the 'bidPrices3' field.
   * @return The value of the 'bidPrices3' field.
   */
  public double getBidPrices3() {
    return bidPrices3;
  }

  /**
   * Gets the value of the 'bidPrices3' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalBidPrices3() {
    return Optional.<java.lang.Double>ofNullable(bidPrices3);
  }

  /**
   * Sets the value of the 'bidPrices3' field.
   * @param value the value to set.
   */
  public FastMarketData setBidPrices3(double value) {
    this.bidPrices3 = value;
    return this;
  }

  /**
   * Gets the value of the 'bidPrices4' field.
   * @return The value of the 'bidPrices4' field.
   */
  public double getBidPrices4() {
    return bidPrices4;
  }

  /**
   * Gets the value of the 'bidPrices4' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalBidPrices4() {
    return Optional.<java.lang.Double>ofNullable(bidPrices4);
  }

  /**
   * Sets the value of the 'bidPrices4' field.
   * @param value the value to set.
   */
  public FastMarketData setBidPrices4(double value) {
    this.bidPrices4 = value;
    return this;
  }

  /**
   * Gets the value of the 'bidPrices5' field.
   * @return The value of the 'bidPrices5' field.
   */
  public double getBidPrices5() {
    return bidPrices5;
  }

  /**
   * Gets the value of the 'bidPrices5' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalBidPrices5() {
    return Optional.<java.lang.Double>ofNullable(bidPrices5);
  }

  /**
   * Sets the value of the 'bidPrices5' field.
   * @param value the value to set.
   */
  public FastMarketData setBidPrices5(double value) {
    this.bidPrices5 = value;
    return this;
  }

  /**
   * Gets the value of the 'bidVolumes1' field.
   * @return The value of the 'bidVolumes1' field.
   */
  public int getBidVolumes1() {
    return bidVolumes1;
  }

  /**
   * Gets the value of the 'bidVolumes1' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalBidVolumes1() {
    return Optional.<java.lang.Integer>ofNullable(bidVolumes1);
  }

  /**
   * Sets the value of the 'bidVolumes1' field.
   * @param value the value to set.
   */
  public FastMarketData setBidVolumes1(int value) {
    this.bidVolumes1 = value;
    return this;
  }

  /**
   * Gets the value of the 'bidVolumes2' field.
   * @return The value of the 'bidVolumes2' field.
   */
  public int getBidVolumes2() {
    return bidVolumes2;
  }

  /**
   * Gets the value of the 'bidVolumes2' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalBidVolumes2() {
    return Optional.<java.lang.Integer>ofNullable(bidVolumes2);
  }

  /**
   * Sets the value of the 'bidVolumes2' field.
   * @param value the value to set.
   */
  public FastMarketData setBidVolumes2(int value) {
    this.bidVolumes2 = value;
    return this;
  }

  /**
   * Gets the value of the 'bidVolumes3' field.
   * @return The value of the 'bidVolumes3' field.
   */
  public int getBidVolumes3() {
    return bidVolumes3;
  }

  /**
   * Gets the value of the 'bidVolumes3' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalBidVolumes3() {
    return Optional.<java.lang.Integer>ofNullable(bidVolumes3);
  }

  /**
   * Sets the value of the 'bidVolumes3' field.
   * @param value the value to set.
   */
  public FastMarketData setBidVolumes3(int value) {
    this.bidVolumes3 = value;
    return this;
  }

  /**
   * Gets the value of the 'bidVolumes4' field.
   * @return The value of the 'bidVolumes4' field.
   */
  public int getBidVolumes4() {
    return bidVolumes4;
  }

  /**
   * Gets the value of the 'bidVolumes4' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalBidVolumes4() {
    return Optional.<java.lang.Integer>ofNullable(bidVolumes4);
  }

  /**
   * Sets the value of the 'bidVolumes4' field.
   * @param value the value to set.
   */
  public FastMarketData setBidVolumes4(int value) {
    this.bidVolumes4 = value;
    return this;
  }

  /**
   * Gets the value of the 'bidVolumes5' field.
   * @return The value of the 'bidVolumes5' field.
   */
  public int getBidVolumes5() {
    return bidVolumes5;
  }

  /**
   * Gets the value of the 'bidVolumes5' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalBidVolumes5() {
    return Optional.<java.lang.Integer>ofNullable(bidVolumes5);
  }

  /**
   * Sets the value of the 'bidVolumes5' field.
   * @param value the value to set.
   */
  public FastMarketData setBidVolumes5(int value) {
    this.bidVolumes5 = value;
    return this;
  }

  /**
   * Gets the value of the 'askPrices1' field.
   * @return The value of the 'askPrices1' field.
   */
  public double getAskPrices1() {
    return askPrices1;
  }

  /**
   * Gets the value of the 'askPrices1' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalAskPrices1() {
    return Optional.<java.lang.Double>ofNullable(askPrices1);
  }

  /**
   * Sets the value of the 'askPrices1' field.
   * @param value the value to set.
   */
  public FastMarketData setAskPrices1(double value) {
    this.askPrices1 = value;
    return this;
  }

  /**
   * Gets the value of the 'askPrices2' field.
   * @return The value of the 'askPrices2' field.
   */
  public double getAskPrices2() {
    return askPrices2;
  }

  /**
   * Gets the value of the 'askPrices2' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalAskPrices2() {
    return Optional.<java.lang.Double>ofNullable(askPrices2);
  }

  /**
   * Sets the value of the 'askPrices2' field.
   * @param value the value to set.
   */
  public FastMarketData setAskPrices2(double value) {
    this.askPrices2 = value;
    return this;
  }

  /**
   * Gets the value of the 'askPrices3' field.
   * @return The value of the 'askPrices3' field.
   */
  public double getAskPrices3() {
    return askPrices3;
  }

  /**
   * Gets the value of the 'askPrices3' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalAskPrices3() {
    return Optional.<java.lang.Double>ofNullable(askPrices3);
  }

  /**
   * Sets the value of the 'askPrices3' field.
   * @param value the value to set.
   */
  public FastMarketData setAskPrices3(double value) {
    this.askPrices3 = value;
    return this;
  }

  /**
   * Gets the value of the 'askPrices4' field.
   * @return The value of the 'askPrices4' field.
   */
  public double getAskPrices4() {
    return askPrices4;
  }

  /**
   * Gets the value of the 'askPrices4' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalAskPrices4() {
    return Optional.<java.lang.Double>ofNullable(askPrices4);
  }

  /**
   * Sets the value of the 'askPrices4' field.
   * @param value the value to set.
   */
  public FastMarketData setAskPrices4(double value) {
    this.askPrices4 = value;
    return this;
  }

  /**
   * Gets the value of the 'askPrices5' field.
   * @return The value of the 'askPrices5' field.
   */
  public double getAskPrices5() {
    return askPrices5;
  }

  /**
   * Gets the value of the 'askPrices5' field as an Optional&lt;java.lang.Double&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
   */
  public Optional<java.lang.Double> getOptionalAskPrices5() {
    return Optional.<java.lang.Double>ofNullable(askPrices5);
  }

  /**
   * Sets the value of the 'askPrices5' field.
   * @param value the value to set.
   */
  public FastMarketData setAskPrices5(double value) {
    this.askPrices5 = value;
    return this;
  }

  /**
   * Gets the value of the 'askVolumes1' field.
   * @return The value of the 'askVolumes1' field.
   */
  public int getAskVolumes1() {
    return askVolumes1;
  }

  /**
   * Gets the value of the 'askVolumes1' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalAskVolumes1() {
    return Optional.<java.lang.Integer>ofNullable(askVolumes1);
  }

  /**
   * Sets the value of the 'askVolumes1' field.
   * @param value the value to set.
   */
  public FastMarketData setAskVolumes1(int value) {
    this.askVolumes1 = value;
    return this;
  }

  /**
   * Gets the value of the 'askVolumes2' field.
   * @return The value of the 'askVolumes2' field.
   */
  public int getAskVolumes2() {
    return askVolumes2;
  }

  /**
   * Gets the value of the 'askVolumes2' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalAskVolumes2() {
    return Optional.<java.lang.Integer>ofNullable(askVolumes2);
  }

  /**
   * Sets the value of the 'askVolumes2' field.
   * @param value the value to set.
   */
  public FastMarketData setAskVolumes2(int value) {
    this.askVolumes2 = value;
    return this;
  }

  /**
   * Gets the value of the 'askVolumes3' field.
   * @return The value of the 'askVolumes3' field.
   */
  public int getAskVolumes3() {
    return askVolumes3;
  }

  /**
   * Gets the value of the 'askVolumes3' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalAskVolumes3() {
    return Optional.<java.lang.Integer>ofNullable(askVolumes3);
  }

  /**
   * Sets the value of the 'askVolumes3' field.
   * @param value the value to set.
   */
  public FastMarketData setAskVolumes3(int value) {
    this.askVolumes3 = value;
    return this;
  }

  /**
   * Gets the value of the 'askVolumes4' field.
   * @return The value of the 'askVolumes4' field.
   */
  public int getAskVolumes4() {
    return askVolumes4;
  }

  /**
   * Gets the value of the 'askVolumes4' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalAskVolumes4() {
    return Optional.<java.lang.Integer>ofNullable(askVolumes4);
  }

  /**
   * Sets the value of the 'askVolumes4' field.
   * @param value the value to set.
   */
  public FastMarketData setAskVolumes4(int value) {
    this.askVolumes4 = value;
    return this;
  }

  /**
   * Gets the value of the 'askVolumes5' field.
   * @return The value of the 'askVolumes5' field.
   */
  public int getAskVolumes5() {
    return askVolumes5;
  }

  /**
   * Gets the value of the 'askVolumes5' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalAskVolumes5() {
    return Optional.<java.lang.Integer>ofNullable(askVolumes5);
  }

  /**
   * Sets the value of the 'askVolumes5' field.
   * @param value the value to set.
   */
  public FastMarketData setAskVolumes5(int value) {
    this.askVolumes5 = value;
    return this;
  }

  /**
   * Creates a new FastMarketData RecordBuilder.
   * @return A new FastMarketData RecordBuilder
   */
  public static io.horizon.market.transport.outbound.FastMarketData.Builder newBuilder() {
    return new io.horizon.market.transport.outbound.FastMarketData.Builder();
  }

  /**
   * Creates a new FastMarketData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FastMarketData RecordBuilder
   */
  public static io.horizon.market.transport.outbound.FastMarketData.Builder newBuilder(io.horizon.market.transport.outbound.FastMarketData.Builder other) {
    if (other == null) {
      return new io.horizon.market.transport.outbound.FastMarketData.Builder();
    } else {
      return new io.horizon.market.transport.outbound.FastMarketData.Builder(other);
    }
  }

  /**
   * Creates a new FastMarketData RecordBuilder by copying an existing FastMarketData instance.
   * @param other The existing instance to copy.
   * @return A new FastMarketData RecordBuilder
   */
  public static io.horizon.market.transport.outbound.FastMarketData.Builder newBuilder(io.horizon.market.transport.outbound.FastMarketData other) {
    if (other == null) {
      return new io.horizon.market.transport.outbound.FastMarketData.Builder();
    } else {
      return new io.horizon.market.transport.outbound.FastMarketData.Builder(other);
    }
  }

  /**
   * RecordBuilder for FastMarketData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FastMarketData>
    implements org.apache.avro.data.RecordBuilder<FastMarketData> {

    private long timestamp;
    private int instrumentId;
    private java.lang.String instrumentCode;
    private double lastPrice;
    private int volume;
    private long turnover;
    private double bidPrices1;
    private double bidPrices2;
    private double bidPrices3;
    private double bidPrices4;
    private double bidPrices5;
    private int bidVolumes1;
    private int bidVolumes2;
    private int bidVolumes3;
    private int bidVolumes4;
    private int bidVolumes5;
    private double askPrices1;
    private double askPrices2;
    private double askPrices3;
    private double askPrices4;
    private double askPrices5;
    private int askVolumes1;
    private int askVolumes2;
    private int askVolumes3;
    private int askVolumes4;
    private int askVolumes5;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.horizon.market.transport.outbound.FastMarketData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.instrumentId)) {
        this.instrumentId = data().deepCopy(fields()[1].schema(), other.instrumentId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[2].schema(), other.instrumentCode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.lastPrice)) {
        this.lastPrice = data().deepCopy(fields()[3].schema(), other.lastPrice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.volume)) {
        this.volume = data().deepCopy(fields()[4].schema(), other.volume);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.turnover)) {
        this.turnover = data().deepCopy(fields()[5].schema(), other.turnover);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.bidPrices1)) {
        this.bidPrices1 = data().deepCopy(fields()[6].schema(), other.bidPrices1);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.bidPrices2)) {
        this.bidPrices2 = data().deepCopy(fields()[7].schema(), other.bidPrices2);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.bidPrices3)) {
        this.bidPrices3 = data().deepCopy(fields()[8].schema(), other.bidPrices3);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.bidPrices4)) {
        this.bidPrices4 = data().deepCopy(fields()[9].schema(), other.bidPrices4);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.bidPrices5)) {
        this.bidPrices5 = data().deepCopy(fields()[10].schema(), other.bidPrices5);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.bidVolumes1)) {
        this.bidVolumes1 = data().deepCopy(fields()[11].schema(), other.bidVolumes1);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.bidVolumes2)) {
        this.bidVolumes2 = data().deepCopy(fields()[12].schema(), other.bidVolumes2);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.bidVolumes3)) {
        this.bidVolumes3 = data().deepCopy(fields()[13].schema(), other.bidVolumes3);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.bidVolumes4)) {
        this.bidVolumes4 = data().deepCopy(fields()[14].schema(), other.bidVolumes4);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.bidVolumes5)) {
        this.bidVolumes5 = data().deepCopy(fields()[15].schema(), other.bidVolumes5);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.askPrices1)) {
        this.askPrices1 = data().deepCopy(fields()[16].schema(), other.askPrices1);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.askPrices2)) {
        this.askPrices2 = data().deepCopy(fields()[17].schema(), other.askPrices2);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.askPrices3)) {
        this.askPrices3 = data().deepCopy(fields()[18].schema(), other.askPrices3);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.askPrices4)) {
        this.askPrices4 = data().deepCopy(fields()[19].schema(), other.askPrices4);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.askPrices5)) {
        this.askPrices5 = data().deepCopy(fields()[20].schema(), other.askPrices5);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.askVolumes1)) {
        this.askVolumes1 = data().deepCopy(fields()[21].schema(), other.askVolumes1);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.askVolumes2)) {
        this.askVolumes2 = data().deepCopy(fields()[22].schema(), other.askVolumes2);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.askVolumes3)) {
        this.askVolumes3 = data().deepCopy(fields()[23].schema(), other.askVolumes3);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.askVolumes4)) {
        this.askVolumes4 = data().deepCopy(fields()[24].schema(), other.askVolumes4);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.askVolumes5)) {
        this.askVolumes5 = data().deepCopy(fields()[25].schema(), other.askVolumes5);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
    }

    /**
     * Creates a Builder by copying an existing FastMarketData instance
     * @param other The existing instance to copy.
     */
    private Builder(io.horizon.market.transport.outbound.FastMarketData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.instrumentId)) {
        this.instrumentId = data().deepCopy(fields()[1].schema(), other.instrumentId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.instrumentCode)) {
        this.instrumentCode = data().deepCopy(fields()[2].schema(), other.instrumentCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastPrice)) {
        this.lastPrice = data().deepCopy(fields()[3].schema(), other.lastPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.volume)) {
        this.volume = data().deepCopy(fields()[4].schema(), other.volume);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.turnover)) {
        this.turnover = data().deepCopy(fields()[5].schema(), other.turnover);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.bidPrices1)) {
        this.bidPrices1 = data().deepCopy(fields()[6].schema(), other.bidPrices1);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.bidPrices2)) {
        this.bidPrices2 = data().deepCopy(fields()[7].schema(), other.bidPrices2);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bidPrices3)) {
        this.bidPrices3 = data().deepCopy(fields()[8].schema(), other.bidPrices3);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.bidPrices4)) {
        this.bidPrices4 = data().deepCopy(fields()[9].schema(), other.bidPrices4);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.bidPrices5)) {
        this.bidPrices5 = data().deepCopy(fields()[10].schema(), other.bidPrices5);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.bidVolumes1)) {
        this.bidVolumes1 = data().deepCopy(fields()[11].schema(), other.bidVolumes1);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.bidVolumes2)) {
        this.bidVolumes2 = data().deepCopy(fields()[12].schema(), other.bidVolumes2);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.bidVolumes3)) {
        this.bidVolumes3 = data().deepCopy(fields()[13].schema(), other.bidVolumes3);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.bidVolumes4)) {
        this.bidVolumes4 = data().deepCopy(fields()[14].schema(), other.bidVolumes4);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.bidVolumes5)) {
        this.bidVolumes5 = data().deepCopy(fields()[15].schema(), other.bidVolumes5);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.askPrices1)) {
        this.askPrices1 = data().deepCopy(fields()[16].schema(), other.askPrices1);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.askPrices2)) {
        this.askPrices2 = data().deepCopy(fields()[17].schema(), other.askPrices2);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.askPrices3)) {
        this.askPrices3 = data().deepCopy(fields()[18].schema(), other.askPrices3);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.askPrices4)) {
        this.askPrices4 = data().deepCopy(fields()[19].schema(), other.askPrices4);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.askPrices5)) {
        this.askPrices5 = data().deepCopy(fields()[20].schema(), other.askPrices5);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.askVolumes1)) {
        this.askVolumes1 = data().deepCopy(fields()[21].schema(), other.askVolumes1);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.askVolumes2)) {
        this.askVolumes2 = data().deepCopy(fields()[22].schema(), other.askVolumes2);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.askVolumes3)) {
        this.askVolumes3 = data().deepCopy(fields()[23].schema(), other.askVolumes3);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.askVolumes4)) {
        this.askVolumes4 = data().deepCopy(fields()[24].schema(), other.askVolumes4);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.askVolumes5)) {
        this.askVolumes5 = data().deepCopy(fields()[25].schema(), other.askVolumes5);
        fieldSetFlags()[25] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }

    /**
      * Gets the value of the 'timestamp' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalTimestamp() {
      return Optional.<java.lang.Long>ofNullable(timestamp);
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setTimestamp(long value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentId' field.
      * @return The value.
      */
    public int getInstrumentId() {
      return instrumentId;
    }

    /**
      * Gets the value of the 'instrumentId' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalInstrumentId() {
      return Optional.<java.lang.Integer>ofNullable(instrumentId);
    }

    /**
      * Sets the value of the 'instrumentId' field.
      * @param value The value of 'instrumentId'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setInstrumentId(int value) {
      validate(fields()[1], value);
      this.instrumentId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentId' field has been set.
      * @return True if the 'instrumentId' field has been set, false otherwise.
      */
    public boolean hasInstrumentId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'instrumentId' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearInstrumentId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentCode' field.
      * @return The value.
      */
    public java.lang.String getInstrumentCode() {
      return instrumentCode;
    }

    /**
      * Gets the value of the 'instrumentCode' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalInstrumentCode() {
      return Optional.<java.lang.String>ofNullable(instrumentCode);
    }

    /**
      * Sets the value of the 'instrumentCode' field.
      * @param value The value of 'instrumentCode'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setInstrumentCode(java.lang.String value) {
      validate(fields()[2], value);
      this.instrumentCode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentCode' field has been set.
      * @return True if the 'instrumentCode' field has been set, false otherwise.
      */
    public boolean hasInstrumentCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'instrumentCode' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearInstrumentCode() {
      instrumentCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastPrice' field.
      * @return The value.
      */
    public double getLastPrice() {
      return lastPrice;
    }

    /**
      * Gets the value of the 'lastPrice' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalLastPrice() {
      return Optional.<java.lang.Double>ofNullable(lastPrice);
    }

    /**
      * Sets the value of the 'lastPrice' field.
      * @param value The value of 'lastPrice'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setLastPrice(double value) {
      validate(fields()[3], value);
      this.lastPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastPrice' field has been set.
      * @return True if the 'lastPrice' field has been set, false otherwise.
      */
    public boolean hasLastPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastPrice' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearLastPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume' field.
      * @return The value.
      */
    public int getVolume() {
      return volume;
    }

    /**
      * Gets the value of the 'volume' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalVolume() {
      return Optional.<java.lang.Integer>ofNullable(volume);
    }

    /**
      * Sets the value of the 'volume' field.
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setVolume(int value) {
      validate(fields()[4], value);
      this.volume = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'volume' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearVolume() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'turnover' field.
      * @return The value.
      */
    public long getTurnover() {
      return turnover;
    }

    /**
      * Gets the value of the 'turnover' field as an Optional&lt;java.lang.Long&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Long&gt;.
      */
    public Optional<java.lang.Long> getOptionalTurnover() {
      return Optional.<java.lang.Long>ofNullable(turnover);
    }

    /**
      * Sets the value of the 'turnover' field.
      * @param value The value of 'turnover'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setTurnover(long value) {
      validate(fields()[5], value);
      this.turnover = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'turnover' field has been set.
      * @return True if the 'turnover' field has been set, false otherwise.
      */
    public boolean hasTurnover() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'turnover' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearTurnover() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidPrices1' field.
      * @return The value.
      */
    public double getBidPrices1() {
      return bidPrices1;
    }

    /**
      * Gets the value of the 'bidPrices1' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalBidPrices1() {
      return Optional.<java.lang.Double>ofNullable(bidPrices1);
    }

    /**
      * Sets the value of the 'bidPrices1' field.
      * @param value The value of 'bidPrices1'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setBidPrices1(double value) {
      validate(fields()[6], value);
      this.bidPrices1 = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'bidPrices1' field has been set.
      * @return True if the 'bidPrices1' field has been set, false otherwise.
      */
    public boolean hasBidPrices1() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'bidPrices1' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearBidPrices1() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidPrices2' field.
      * @return The value.
      */
    public double getBidPrices2() {
      return bidPrices2;
    }

    /**
      * Gets the value of the 'bidPrices2' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalBidPrices2() {
      return Optional.<java.lang.Double>ofNullable(bidPrices2);
    }

    /**
      * Sets the value of the 'bidPrices2' field.
      * @param value The value of 'bidPrices2'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setBidPrices2(double value) {
      validate(fields()[7], value);
      this.bidPrices2 = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'bidPrices2' field has been set.
      * @return True if the 'bidPrices2' field has been set, false otherwise.
      */
    public boolean hasBidPrices2() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'bidPrices2' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearBidPrices2() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidPrices3' field.
      * @return The value.
      */
    public double getBidPrices3() {
      return bidPrices3;
    }

    /**
      * Gets the value of the 'bidPrices3' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalBidPrices3() {
      return Optional.<java.lang.Double>ofNullable(bidPrices3);
    }

    /**
      * Sets the value of the 'bidPrices3' field.
      * @param value The value of 'bidPrices3'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setBidPrices3(double value) {
      validate(fields()[8], value);
      this.bidPrices3 = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'bidPrices3' field has been set.
      * @return True if the 'bidPrices3' field has been set, false otherwise.
      */
    public boolean hasBidPrices3() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'bidPrices3' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearBidPrices3() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidPrices4' field.
      * @return The value.
      */
    public double getBidPrices4() {
      return bidPrices4;
    }

    /**
      * Gets the value of the 'bidPrices4' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalBidPrices4() {
      return Optional.<java.lang.Double>ofNullable(bidPrices4);
    }

    /**
      * Sets the value of the 'bidPrices4' field.
      * @param value The value of 'bidPrices4'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setBidPrices4(double value) {
      validate(fields()[9], value);
      this.bidPrices4 = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'bidPrices4' field has been set.
      * @return True if the 'bidPrices4' field has been set, false otherwise.
      */
    public boolean hasBidPrices4() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'bidPrices4' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearBidPrices4() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidPrices5' field.
      * @return The value.
      */
    public double getBidPrices5() {
      return bidPrices5;
    }

    /**
      * Gets the value of the 'bidPrices5' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalBidPrices5() {
      return Optional.<java.lang.Double>ofNullable(bidPrices5);
    }

    /**
      * Sets the value of the 'bidPrices5' field.
      * @param value The value of 'bidPrices5'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setBidPrices5(double value) {
      validate(fields()[10], value);
      this.bidPrices5 = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'bidPrices5' field has been set.
      * @return True if the 'bidPrices5' field has been set, false otherwise.
      */
    public boolean hasBidPrices5() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'bidPrices5' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearBidPrices5() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidVolumes1' field.
      * @return The value.
      */
    public int getBidVolumes1() {
      return bidVolumes1;
    }

    /**
      * Gets the value of the 'bidVolumes1' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalBidVolumes1() {
      return Optional.<java.lang.Integer>ofNullable(bidVolumes1);
    }

    /**
      * Sets the value of the 'bidVolumes1' field.
      * @param value The value of 'bidVolumes1'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setBidVolumes1(int value) {
      validate(fields()[11], value);
      this.bidVolumes1 = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'bidVolumes1' field has been set.
      * @return True if the 'bidVolumes1' field has been set, false otherwise.
      */
    public boolean hasBidVolumes1() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'bidVolumes1' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearBidVolumes1() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidVolumes2' field.
      * @return The value.
      */
    public int getBidVolumes2() {
      return bidVolumes2;
    }

    /**
      * Gets the value of the 'bidVolumes2' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalBidVolumes2() {
      return Optional.<java.lang.Integer>ofNullable(bidVolumes2);
    }

    /**
      * Sets the value of the 'bidVolumes2' field.
      * @param value The value of 'bidVolumes2'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setBidVolumes2(int value) {
      validate(fields()[12], value);
      this.bidVolumes2 = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'bidVolumes2' field has been set.
      * @return True if the 'bidVolumes2' field has been set, false otherwise.
      */
    public boolean hasBidVolumes2() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'bidVolumes2' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearBidVolumes2() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidVolumes3' field.
      * @return The value.
      */
    public int getBidVolumes3() {
      return bidVolumes3;
    }

    /**
      * Gets the value of the 'bidVolumes3' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalBidVolumes3() {
      return Optional.<java.lang.Integer>ofNullable(bidVolumes3);
    }

    /**
      * Sets the value of the 'bidVolumes3' field.
      * @param value The value of 'bidVolumes3'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setBidVolumes3(int value) {
      validate(fields()[13], value);
      this.bidVolumes3 = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'bidVolumes3' field has been set.
      * @return True if the 'bidVolumes3' field has been set, false otherwise.
      */
    public boolean hasBidVolumes3() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'bidVolumes3' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearBidVolumes3() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidVolumes4' field.
      * @return The value.
      */
    public int getBidVolumes4() {
      return bidVolumes4;
    }

    /**
      * Gets the value of the 'bidVolumes4' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalBidVolumes4() {
      return Optional.<java.lang.Integer>ofNullable(bidVolumes4);
    }

    /**
      * Sets the value of the 'bidVolumes4' field.
      * @param value The value of 'bidVolumes4'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setBidVolumes4(int value) {
      validate(fields()[14], value);
      this.bidVolumes4 = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'bidVolumes4' field has been set.
      * @return True if the 'bidVolumes4' field has been set, false otherwise.
      */
    public boolean hasBidVolumes4() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'bidVolumes4' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearBidVolumes4() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidVolumes5' field.
      * @return The value.
      */
    public int getBidVolumes5() {
      return bidVolumes5;
    }

    /**
      * Gets the value of the 'bidVolumes5' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalBidVolumes5() {
      return Optional.<java.lang.Integer>ofNullable(bidVolumes5);
    }

    /**
      * Sets the value of the 'bidVolumes5' field.
      * @param value The value of 'bidVolumes5'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setBidVolumes5(int value) {
      validate(fields()[15], value);
      this.bidVolumes5 = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'bidVolumes5' field has been set.
      * @return True if the 'bidVolumes5' field has been set, false otherwise.
      */
    public boolean hasBidVolumes5() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'bidVolumes5' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearBidVolumes5() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'askPrices1' field.
      * @return The value.
      */
    public double getAskPrices1() {
      return askPrices1;
    }

    /**
      * Gets the value of the 'askPrices1' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalAskPrices1() {
      return Optional.<java.lang.Double>ofNullable(askPrices1);
    }

    /**
      * Sets the value of the 'askPrices1' field.
      * @param value The value of 'askPrices1'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setAskPrices1(double value) {
      validate(fields()[16], value);
      this.askPrices1 = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'askPrices1' field has been set.
      * @return True if the 'askPrices1' field has been set, false otherwise.
      */
    public boolean hasAskPrices1() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'askPrices1' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearAskPrices1() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'askPrices2' field.
      * @return The value.
      */
    public double getAskPrices2() {
      return askPrices2;
    }

    /**
      * Gets the value of the 'askPrices2' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalAskPrices2() {
      return Optional.<java.lang.Double>ofNullable(askPrices2);
    }

    /**
      * Sets the value of the 'askPrices2' field.
      * @param value The value of 'askPrices2'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setAskPrices2(double value) {
      validate(fields()[17], value);
      this.askPrices2 = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'askPrices2' field has been set.
      * @return True if the 'askPrices2' field has been set, false otherwise.
      */
    public boolean hasAskPrices2() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'askPrices2' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearAskPrices2() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'askPrices3' field.
      * @return The value.
      */
    public double getAskPrices3() {
      return askPrices3;
    }

    /**
      * Gets the value of the 'askPrices3' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalAskPrices3() {
      return Optional.<java.lang.Double>ofNullable(askPrices3);
    }

    /**
      * Sets the value of the 'askPrices3' field.
      * @param value The value of 'askPrices3'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setAskPrices3(double value) {
      validate(fields()[18], value);
      this.askPrices3 = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'askPrices3' field has been set.
      * @return True if the 'askPrices3' field has been set, false otherwise.
      */
    public boolean hasAskPrices3() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'askPrices3' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearAskPrices3() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'askPrices4' field.
      * @return The value.
      */
    public double getAskPrices4() {
      return askPrices4;
    }

    /**
      * Gets the value of the 'askPrices4' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalAskPrices4() {
      return Optional.<java.lang.Double>ofNullable(askPrices4);
    }

    /**
      * Sets the value of the 'askPrices4' field.
      * @param value The value of 'askPrices4'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setAskPrices4(double value) {
      validate(fields()[19], value);
      this.askPrices4 = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'askPrices4' field has been set.
      * @return True if the 'askPrices4' field has been set, false otherwise.
      */
    public boolean hasAskPrices4() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'askPrices4' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearAskPrices4() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'askPrices5' field.
      * @return The value.
      */
    public double getAskPrices5() {
      return askPrices5;
    }

    /**
      * Gets the value of the 'askPrices5' field as an Optional&lt;java.lang.Double&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Double&gt;.
      */
    public Optional<java.lang.Double> getOptionalAskPrices5() {
      return Optional.<java.lang.Double>ofNullable(askPrices5);
    }

    /**
      * Sets the value of the 'askPrices5' field.
      * @param value The value of 'askPrices5'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setAskPrices5(double value) {
      validate(fields()[20], value);
      this.askPrices5 = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'askPrices5' field has been set.
      * @return True if the 'askPrices5' field has been set, false otherwise.
      */
    public boolean hasAskPrices5() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'askPrices5' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearAskPrices5() {
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'askVolumes1' field.
      * @return The value.
      */
    public int getAskVolumes1() {
      return askVolumes1;
    }

    /**
      * Gets the value of the 'askVolumes1' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalAskVolumes1() {
      return Optional.<java.lang.Integer>ofNullable(askVolumes1);
    }

    /**
      * Sets the value of the 'askVolumes1' field.
      * @param value The value of 'askVolumes1'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setAskVolumes1(int value) {
      validate(fields()[21], value);
      this.askVolumes1 = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'askVolumes1' field has been set.
      * @return True if the 'askVolumes1' field has been set, false otherwise.
      */
    public boolean hasAskVolumes1() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'askVolumes1' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearAskVolumes1() {
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'askVolumes2' field.
      * @return The value.
      */
    public int getAskVolumes2() {
      return askVolumes2;
    }

    /**
      * Gets the value of the 'askVolumes2' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalAskVolumes2() {
      return Optional.<java.lang.Integer>ofNullable(askVolumes2);
    }

    /**
      * Sets the value of the 'askVolumes2' field.
      * @param value The value of 'askVolumes2'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setAskVolumes2(int value) {
      validate(fields()[22], value);
      this.askVolumes2 = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'askVolumes2' field has been set.
      * @return True if the 'askVolumes2' field has been set, false otherwise.
      */
    public boolean hasAskVolumes2() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'askVolumes2' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearAskVolumes2() {
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'askVolumes3' field.
      * @return The value.
      */
    public int getAskVolumes3() {
      return askVolumes3;
    }

    /**
      * Gets the value of the 'askVolumes3' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalAskVolumes3() {
      return Optional.<java.lang.Integer>ofNullable(askVolumes3);
    }

    /**
      * Sets the value of the 'askVolumes3' field.
      * @param value The value of 'askVolumes3'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setAskVolumes3(int value) {
      validate(fields()[23], value);
      this.askVolumes3 = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'askVolumes3' field has been set.
      * @return True if the 'askVolumes3' field has been set, false otherwise.
      */
    public boolean hasAskVolumes3() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'askVolumes3' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearAskVolumes3() {
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'askVolumes4' field.
      * @return The value.
      */
    public int getAskVolumes4() {
      return askVolumes4;
    }

    /**
      * Gets the value of the 'askVolumes4' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalAskVolumes4() {
      return Optional.<java.lang.Integer>ofNullable(askVolumes4);
    }

    /**
      * Sets the value of the 'askVolumes4' field.
      * @param value The value of 'askVolumes4'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setAskVolumes4(int value) {
      validate(fields()[24], value);
      this.askVolumes4 = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'askVolumes4' field has been set.
      * @return True if the 'askVolumes4' field has been set, false otherwise.
      */
    public boolean hasAskVolumes4() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'askVolumes4' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearAskVolumes4() {
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'askVolumes5' field.
      * @return The value.
      */
    public int getAskVolumes5() {
      return askVolumes5;
    }

    /**
      * Gets the value of the 'askVolumes5' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalAskVolumes5() {
      return Optional.<java.lang.Integer>ofNullable(askVolumes5);
    }

    /**
      * Sets the value of the 'askVolumes5' field.
      * @param value The value of 'askVolumes5'.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder setAskVolumes5(int value) {
      validate(fields()[25], value);
      this.askVolumes5 = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'askVolumes5' field has been set.
      * @return True if the 'askVolumes5' field has been set, false otherwise.
      */
    public boolean hasAskVolumes5() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'askVolumes5' field.
      * @return This builder.
      */
    public io.horizon.market.transport.outbound.FastMarketData.Builder clearAskVolumes5() {
      fieldSetFlags()[25] = false;
      return this;
    }

    @Override
    public FastMarketData build() {
      try {
        FastMarketData record = new FastMarketData();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.Long) defaultValue(fields()[0]);
        record.instrumentId = fieldSetFlags()[1] ? this.instrumentId : (java.lang.Integer) defaultValue(fields()[1]);
        record.instrumentCode = fieldSetFlags()[2] ? this.instrumentCode : (java.lang.String) defaultValue(fields()[2]);
        record.lastPrice = fieldSetFlags()[3] ? this.lastPrice : (java.lang.Double) defaultValue(fields()[3]);
        record.volume = fieldSetFlags()[4] ? this.volume : (java.lang.Integer) defaultValue(fields()[4]);
        record.turnover = fieldSetFlags()[5] ? this.turnover : (java.lang.Long) defaultValue(fields()[5]);
        record.bidPrices1 = fieldSetFlags()[6] ? this.bidPrices1 : (java.lang.Double) defaultValue(fields()[6]);
        record.bidPrices2 = fieldSetFlags()[7] ? this.bidPrices2 : (java.lang.Double) defaultValue(fields()[7]);
        record.bidPrices3 = fieldSetFlags()[8] ? this.bidPrices3 : (java.lang.Double) defaultValue(fields()[8]);
        record.bidPrices4 = fieldSetFlags()[9] ? this.bidPrices4 : (java.lang.Double) defaultValue(fields()[9]);
        record.bidPrices5 = fieldSetFlags()[10] ? this.bidPrices5 : (java.lang.Double) defaultValue(fields()[10]);
        record.bidVolumes1 = fieldSetFlags()[11] ? this.bidVolumes1 : (java.lang.Integer) defaultValue(fields()[11]);
        record.bidVolumes2 = fieldSetFlags()[12] ? this.bidVolumes2 : (java.lang.Integer) defaultValue(fields()[12]);
        record.bidVolumes3 = fieldSetFlags()[13] ? this.bidVolumes3 : (java.lang.Integer) defaultValue(fields()[13]);
        record.bidVolumes4 = fieldSetFlags()[14] ? this.bidVolumes4 : (java.lang.Integer) defaultValue(fields()[14]);
        record.bidVolumes5 = fieldSetFlags()[15] ? this.bidVolumes5 : (java.lang.Integer) defaultValue(fields()[15]);
        record.askPrices1 = fieldSetFlags()[16] ? this.askPrices1 : (java.lang.Double) defaultValue(fields()[16]);
        record.askPrices2 = fieldSetFlags()[17] ? this.askPrices2 : (java.lang.Double) defaultValue(fields()[17]);
        record.askPrices3 = fieldSetFlags()[18] ? this.askPrices3 : (java.lang.Double) defaultValue(fields()[18]);
        record.askPrices4 = fieldSetFlags()[19] ? this.askPrices4 : (java.lang.Double) defaultValue(fields()[19]);
        record.askPrices5 = fieldSetFlags()[20] ? this.askPrices5 : (java.lang.Double) defaultValue(fields()[20]);
        record.askVolumes1 = fieldSetFlags()[21] ? this.askVolumes1 : (java.lang.Integer) defaultValue(fields()[21]);
        record.askVolumes2 = fieldSetFlags()[22] ? this.askVolumes2 : (java.lang.Integer) defaultValue(fields()[22]);
        record.askVolumes3 = fieldSetFlags()[23] ? this.askVolumes3 : (java.lang.Integer) defaultValue(fields()[23]);
        record.askVolumes4 = fieldSetFlags()[24] ? this.askVolumes4 : (java.lang.Integer) defaultValue(fields()[24]);
        record.askVolumes5 = fieldSetFlags()[25] ? this.askVolumes5 : (java.lang.Integer) defaultValue(fields()[25]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FastMarketData>
    WRITER$ = (org.apache.avro.io.DatumWriter<FastMarketData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FastMarketData>
    READER$ = (org.apache.avro.io.DatumReader<FastMarketData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.timestamp);

    out.writeInt(this.instrumentId);

    out.writeString(this.instrumentCode);

    out.writeDouble(this.lastPrice);

    out.writeInt(this.volume);

    out.writeLong(this.turnover);

    out.writeDouble(this.bidPrices1);

    out.writeDouble(this.bidPrices2);

    out.writeDouble(this.bidPrices3);

    out.writeDouble(this.bidPrices4);

    out.writeDouble(this.bidPrices5);

    out.writeInt(this.bidVolumes1);

    out.writeInt(this.bidVolumes2);

    out.writeInt(this.bidVolumes3);

    out.writeInt(this.bidVolumes4);

    out.writeInt(this.bidVolumes5);

    out.writeDouble(this.askPrices1);

    out.writeDouble(this.askPrices2);

    out.writeDouble(this.askPrices3);

    out.writeDouble(this.askPrices4);

    out.writeDouble(this.askPrices5);

    out.writeInt(this.askVolumes1);

    out.writeInt(this.askVolumes2);

    out.writeInt(this.askVolumes3);

    out.writeInt(this.askVolumes4);

    out.writeInt(this.askVolumes5);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.timestamp = in.readLong();

      this.instrumentId = in.readInt();

      this.instrumentCode = in.readString();

      this.lastPrice = in.readDouble();

      this.volume = in.readInt();

      this.turnover = in.readLong();

      this.bidPrices1 = in.readDouble();

      this.bidPrices2 = in.readDouble();

      this.bidPrices3 = in.readDouble();

      this.bidPrices4 = in.readDouble();

      this.bidPrices5 = in.readDouble();

      this.bidVolumes1 = in.readInt();

      this.bidVolumes2 = in.readInt();

      this.bidVolumes3 = in.readInt();

      this.bidVolumes4 = in.readInt();

      this.bidVolumes5 = in.readInt();

      this.askPrices1 = in.readDouble();

      this.askPrices2 = in.readDouble();

      this.askPrices3 = in.readDouble();

      this.askPrices4 = in.readDouble();

      this.askPrices5 = in.readDouble();

      this.askVolumes1 = in.readInt();

      this.askVolumes2 = in.readInt();

      this.askVolumes3 = in.readInt();

      this.askVolumes4 = in.readInt();

      this.askVolumes5 = in.readInt();

    } else {
      for (int i = 0; i < 26; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.timestamp = in.readLong();
          break;

        case 1:
          this.instrumentId = in.readInt();
          break;

        case 2:
          this.instrumentCode = in.readString();
          break;

        case 3:
          this.lastPrice = in.readDouble();
          break;

        case 4:
          this.volume = in.readInt();
          break;

        case 5:
          this.turnover = in.readLong();
          break;

        case 6:
          this.bidPrices1 = in.readDouble();
          break;

        case 7:
          this.bidPrices2 = in.readDouble();
          break;

        case 8:
          this.bidPrices3 = in.readDouble();
          break;

        case 9:
          this.bidPrices4 = in.readDouble();
          break;

        case 10:
          this.bidPrices5 = in.readDouble();
          break;

        case 11:
          this.bidVolumes1 = in.readInt();
          break;

        case 12:
          this.bidVolumes2 = in.readInt();
          break;

        case 13:
          this.bidVolumes3 = in.readInt();
          break;

        case 14:
          this.bidVolumes4 = in.readInt();
          break;

        case 15:
          this.bidVolumes5 = in.readInt();
          break;

        case 16:
          this.askPrices1 = in.readDouble();
          break;

        case 17:
          this.askPrices2 = in.readDouble();
          break;

        case 18:
          this.askPrices3 = in.readDouble();
          break;

        case 19:
          this.askPrices4 = in.readDouble();
          break;

        case 20:
          this.askPrices5 = in.readDouble();
          break;

        case 21:
          this.askVolumes1 = in.readInt();
          break;

        case 22:
          this.askVolumes2 = in.readInt();
          break;

        case 23:
          this.askVolumes3 = in.readInt();
          break;

        case 24:
          this.askVolumes4 = in.readInt();
          break;

        case 25:
          this.askVolumes5 = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










