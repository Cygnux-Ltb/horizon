/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.horizon.market.transport.inbound;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
/** * 行情订阅 */
@org.apache.avro.specific.AvroGenerated
public class MarketDataSubscribe extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4989664846211479797L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MarketDataSubscribe\",\"namespace\":\"io.horizon.market.transport.inbound\",\"doc\":\"* 行情订阅\",\"fields\":[{\"name\":\"instrumentCodes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"MarketDataType\",\"namespace\":\"io.horizon.market.transport.enums\",\"symbols\":[\"Depth\",\"Fast\",\"Level10\",\"Level20\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MarketDataSubscribe> ENCODER =
      new BinaryMessageEncoder<MarketDataSubscribe>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MarketDataSubscribe> DECODER =
      new BinaryMessageDecoder<MarketDataSubscribe>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MarketDataSubscribe> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MarketDataSubscribe> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MarketDataSubscribe> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MarketDataSubscribe>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MarketDataSubscribe to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MarketDataSubscribe from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MarketDataSubscribe instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MarketDataSubscribe fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<java.lang.String> instrumentCodes;
  private io.horizon.market.transport.enums.MarketDataType type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MarketDataSubscribe() {}

  /**
   * All-args constructor.
   * @param instrumentCodes The new value for instrumentCodes
   * @param type The new value for type
   */
  public MarketDataSubscribe(java.util.List<java.lang.String> instrumentCodes, io.horizon.market.transport.enums.MarketDataType type) {
    this.instrumentCodes = instrumentCodes;
    this.type = type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return instrumentCodes;
    case 1: return type;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: instrumentCodes = (java.util.List<java.lang.String>)value$; break;
    case 1: type = (io.horizon.market.transport.enums.MarketDataType)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'instrumentCodes' field.
   * @return The value of the 'instrumentCodes' field.
   */
  public java.util.List<java.lang.String> getInstrumentCodes() {
    return instrumentCodes;
  }

  /**
   * Gets the value of the 'instrumentCodes' field as an Optional&lt;java.util.List<java.lang.String>&gt;.
   * @return The value wrapped in an Optional&lt;java.util.List<java.lang.String>&gt;.
   */
  public Optional<java.util.List<java.lang.String>> getOptionalInstrumentCodes() {
    return Optional.<java.util.List<java.lang.String>>ofNullable(instrumentCodes);
  }

  /**
   * Sets the value of the 'instrumentCodes' field.
   * @param value the value to set.
   */
  public void setInstrumentCodes(java.util.List<java.lang.String> value) {
    this.instrumentCodes = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public io.horizon.market.transport.enums.MarketDataType getType() {
    return type;
  }

  /**
   * Gets the value of the 'type' field as an Optional&lt;io.horizon.market.transport.enums.MarketDataType&gt;.
   * @return The value wrapped in an Optional&lt;io.horizon.market.transport.enums.MarketDataType&gt;.
   */
  public Optional<io.horizon.market.transport.enums.MarketDataType> getOptionalType() {
    return Optional.<io.horizon.market.transport.enums.MarketDataType>ofNullable(type);
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(io.horizon.market.transport.enums.MarketDataType value) {
    this.type = value;
  }

  /**
   * Creates a new MarketDataSubscribe RecordBuilder.
   * @return A new MarketDataSubscribe RecordBuilder
   */
  public static io.horizon.market.transport.inbound.MarketDataSubscribe.Builder newBuilder() {
    return new io.horizon.market.transport.inbound.MarketDataSubscribe.Builder();
  }

  /**
   * Creates a new MarketDataSubscribe RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MarketDataSubscribe RecordBuilder
   */
  public static io.horizon.market.transport.inbound.MarketDataSubscribe.Builder newBuilder(io.horizon.market.transport.inbound.MarketDataSubscribe.Builder other) {
    if (other == null) {
      return new io.horizon.market.transport.inbound.MarketDataSubscribe.Builder();
    } else {
      return new io.horizon.market.transport.inbound.MarketDataSubscribe.Builder(other);
    }
  }

  /**
   * Creates a new MarketDataSubscribe RecordBuilder by copying an existing MarketDataSubscribe instance.
   * @param other The existing instance to copy.
   * @return A new MarketDataSubscribe RecordBuilder
   */
  public static io.horizon.market.transport.inbound.MarketDataSubscribe.Builder newBuilder(io.horizon.market.transport.inbound.MarketDataSubscribe other) {
    if (other == null) {
      return new io.horizon.market.transport.inbound.MarketDataSubscribe.Builder();
    } else {
      return new io.horizon.market.transport.inbound.MarketDataSubscribe.Builder(other);
    }
  }

  /**
   * RecordBuilder for MarketDataSubscribe instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MarketDataSubscribe>
    implements org.apache.avro.data.RecordBuilder<MarketDataSubscribe> {

    private java.util.List<java.lang.String> instrumentCodes;
    private io.horizon.market.transport.enums.MarketDataType type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.horizon.market.transport.inbound.MarketDataSubscribe.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.instrumentCodes)) {
        this.instrumentCodes = data().deepCopy(fields()[0].schema(), other.instrumentCodes);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing MarketDataSubscribe instance
     * @param other The existing instance to copy.
     */
    private Builder(io.horizon.market.transport.inbound.MarketDataSubscribe other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.instrumentCodes)) {
        this.instrumentCodes = data().deepCopy(fields()[0].schema(), other.instrumentCodes);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'instrumentCodes' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getInstrumentCodes() {
      return instrumentCodes;
    }

    /**
      * Gets the value of the 'instrumentCodes' field as an Optional&lt;java.util.List<java.lang.String>&gt;.
      * @return The value wrapped in an Optional&lt;java.util.List<java.lang.String>&gt;.
      */
    public Optional<java.util.List<java.lang.String>> getOptionalInstrumentCodes() {
      return Optional.<java.util.List<java.lang.String>>ofNullable(instrumentCodes);
    }

    /**
      * Sets the value of the 'instrumentCodes' field.
      * @param value The value of 'instrumentCodes'.
      * @return This builder.
      */
    public io.horizon.market.transport.inbound.MarketDataSubscribe.Builder setInstrumentCodes(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.instrumentCodes = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentCodes' field has been set.
      * @return True if the 'instrumentCodes' field has been set, false otherwise.
      */
    public boolean hasInstrumentCodes() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'instrumentCodes' field.
      * @return This builder.
      */
    public io.horizon.market.transport.inbound.MarketDataSubscribe.Builder clearInstrumentCodes() {
      instrumentCodes = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public io.horizon.market.transport.enums.MarketDataType getType() {
      return type;
    }

    /**
      * Gets the value of the 'type' field as an Optional&lt;io.horizon.market.transport.enums.MarketDataType&gt;.
      * @return The value wrapped in an Optional&lt;io.horizon.market.transport.enums.MarketDataType&gt;.
      */
    public Optional<io.horizon.market.transport.enums.MarketDataType> getOptionalType() {
      return Optional.<io.horizon.market.transport.enums.MarketDataType>ofNullable(type);
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.horizon.market.transport.inbound.MarketDataSubscribe.Builder setType(io.horizon.market.transport.enums.MarketDataType value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public io.horizon.market.transport.inbound.MarketDataSubscribe.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public MarketDataSubscribe build() {
      try {
        MarketDataSubscribe record = new MarketDataSubscribe();
        record.instrumentCodes = fieldSetFlags()[0] ? this.instrumentCodes : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (io.horizon.market.transport.enums.MarketDataType) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MarketDataSubscribe>
    WRITER$ = (org.apache.avro.io.DatumWriter<MarketDataSubscribe>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MarketDataSubscribe>
    READER$ = (org.apache.avro.io.DatumReader<MarketDataSubscribe>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.instrumentCodes.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.instrumentCodes) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeEnum(this.type.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.instrumentCodes;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("instrumentCodes").schema());
        this.instrumentCodes = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      this.type = io.horizon.market.transport.enums.MarketDataType.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.instrumentCodes;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("instrumentCodes").schema());
            this.instrumentCodes = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 1:
          this.type = io.horizon.market.transport.enums.MarketDataType.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










